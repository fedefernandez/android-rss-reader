<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearch/1.1/"
	xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:georss="http://www.georss.org/georss"
	xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0"
	xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" gd:etag="W/&quot;DkQMSHw4fyp7ImA9WhBTGU0.&quot;">
	<id>tag:blogger.com,1999:blog-6755709643044947179</id>
	<updated>2013-02-14T20:59:49.237-08:00</updated>
	<category term="Media and Camera" />
	<category term="User Interface" />
	<category term="Mountain View" />
	<category term="Animation and Graphics" />
	<category term="Location" />
	<category term="App Components" />
	<category term="Gestures" />
	<category term="Google Play" />
	<category term="Developer Console" />
	<category term="Security" />
	<category term="London" />
	<category term="Android 2.1" />
	<category term="Android Developer Phone" />
	<category term="Photo Sphere" />
	<category term="Connectivity" />
	<category term="Testing" />
	<category term="Quality" />
	<category term="Administration" />
	<category term="Boston" />
	<category term="In-app Billing" />
	<category term="accessibility" />
	<category term="Open source" />
	<category term="Games" />
	<category term="WebView" />
	<category term="Resources" />
	<category term="Android Developer Challenge" />
	<category term="Android 4.2" />
	<category term="Apps" />
	<category term="OpenGL ES" />
	<category term="Promo Graphics" />
	<category term="NDK" />
	<category term="Cool Stuff" />
	<category term="Debugging" />
	<category term="Speech Input" />
	<category term="Text-to-Speech" />
	<category term="Tablets" />
	<category term="io2010" />
	<category term="Google I/O" />
	<category term="Android 2.3.3" />
	<category term="Google Services" />
	<category term="Android 3.2" />
	<category term="Munich" />
	<category term="Guidelines" />
	<category term="Android 2.0" />
	<category term="JNI" />
	<category term="Quick Search Box" />
	<category term="Google Play services" />
	<category term="Tel Aviv" />
	<category term="SDK Tools" />
	<category term="Android Market" />
	<category term="Android 2.3" />
	<category term="Android 1.5" />
	<category term="Location and Sensors" />
	<category term="Android SDK" />
	<category term="Developer profiles" />
	<category term="Best Practices" />
	<category term="Widgets" />
	<category term="Sample code" />
	<category term="Developer Labs" />
	<category term="Announcements" />
	<category term="Dashboard" />
	<category term="Intents" />
	<category term="Touch" />
	<category term="Content Provider" />
	<category term="App Resources" />
	<category term="Android 2.2" />
	<category term="Maps" />
	<category term="Layout" />
	<category term="Developer Story" />
	<category term="Code Day" />
	<category term="Developer Days" />
	<category term="Android 1.6" />
	<category term="Daydream" />
	<category term="Tools" />
	<category term="Authentication" />
	<category term="How-to" />
	<category term="Android 3.0" />
	<category term="SDK updates" />
	<category term="Input methods" />
	<category term="Renderscript" />
	<category term="Text and Input" />
	<category term="Android 4.0" />
	<category term="Optimization" />
	<category term="Android Design" />
	<category term="Sensors" />
	<category term="IME" />
	<title type="text">Android Developers Blog</title>
	<subtitle type="html">An Open Handset Alliance Project.</subtitle>
	<link rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml"
		href="http://android-developers.blogspot.com/feeds/posts/default" />
	<link rel="alternate" type="text/html"
		href="http://android-developers.blogspot.com/" />
	<link rel="next" type="application/atom+xml"
		href="http://www.blogger.com/feeds/6755709643044947179/posts/default?start-index=26&amp;max-results=25&amp;redirect=false&amp;v=2" />
	<author>
		<name>Randall Sarafa</name>
		<uri>http://www.blogger.com/profile/01955528568659019346</uri>
		<email>noreply@blogger.com</email>
		<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
			width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
	</author>
	<generator version="7.00" uri="http://www.blogger.com">Blogger</generator>
	<openSearch:totalResults>299</openSearch:totalResults>
	<openSearch:startIndex>1</openSearch:startIndex>
	<openSearch:itemsPerPage>25</openSearch:itemsPerPage>
	<atom10:link xmlns:atom10="http://www.w3.org/2005/Atom"
		rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/blogspot/hsDu" />
	<feedburner:info uri="blogspot/hsdu" />
	<atom10:link xmlns:atom10="http://www.w3.org/2005/Atom"
		rel="hub" href="http://pubsubhubbub.appspot.com/" />
	<entry gd:etag="W/&quot;DkQMSHw-fCp7ImA9WhBTGU0.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-5100495786509778676
		</id>
		<published>2013-02-14T13:37:00.000-08:00</published>
		<updated>2013-02-14T20:59:49.254-08:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2013-02-14T20:59:49.254-08:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Security" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Content Provider" />
		<category scheme="http://www.blogger.com/atom/ns#" term="WebView" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Android 4.2" />
		<category scheme="http://www.blogger.com/atom/ns#" term="SDK Tools" />
		<title>Security Enhancements in Jelly Bean</title>
		<content type="html">&lt;p&gt;&lt;em&gt;Posted by &lt;a
			href="https://plus.google.com/u/1/112600205125796554588/"&gt;Fred
			Chung&lt;/a&gt;, Android Developer Relations
			team&lt;/em&gt;&lt;/p&gt;

			&lt;p&gt;Android 4.2, Jelly Bean, introduced quite a few &lt;a
			href="http://developer.android.com/about/versions/jelly-bean.html"&gt;new
			features&lt;/a&gt;, and under the covers it also added a number of
			&lt;a
			href="https://developer.android.com/about/versions/jelly-bean.html#42-platform-tech"&gt;security
			enhancements&lt;/a&gt; to ensure a more secure environment for users
			and developers.&lt;/p&gt;

			&lt;p itemprop="description"&gt;This post highlights a few of the security
			enhancements in Android 4.2 that are especially important for
			developers to be aware of and understand. Regardless whether you are
			targeting your app to devices running Jelly Bean or to earlier
			versions of Android, it's a good idea to validate these areas in
			order to make your app more secure and robust.&lt;/p&gt;

			&lt;h3 id="provider-access"&gt;Content Provider default access has
			changed&lt;/h3&gt;

			&lt;p&gt;&lt;a
			href="http://developer.android.com/guide/topics/providers/content-providers.html"&gt;Content
			providers&lt;/a&gt; are a facility to enable data sharing amongst app
			and system components. Access to content providers should always be
			based on the principle of least privilege &amp;mdash; that is, only
			grant the minimal possible access for another component to carry out
			the necessary tasks. You can control access to your content providers
			through a combination of the &lt;code&gt;exported&lt;/code&gt;
			attribute in the provider declaration and app-specific permissions
			for reading/writing data in the provider.&lt;/p&gt;

			&lt;p&gt;In the example below, the provider
			&lt;code&gt;ReadOnlyDataContentProvider&lt;/code&gt; sets the
			&lt;code&gt;exported&lt;/code&gt; attribute to "true", explicitly
			declaring that it is readable by any external app that has acquired
			the &lt;code&gt;READ_DATA&lt;/code&gt; permission, and that no other
			components can write to it.&lt;/p&gt;

			&lt;pre&gt;&amp;lt;provider android:name=”com.example.ReadOnlyDataContentProvider”
			android:authorities=”com.example”
			android:exported=”true”
			android:readPermission=”com.example.permission.READ_DATA” /&amp;gt;&lt;/pre&gt;

			&lt;p&gt;Since the &lt;code&gt;exported&lt;/code&gt; attribute is an optional
			field, potential ambiguity arises when the field is not explicitly
			declared in the manifest, and that is where the behavior has changed
			in Android 4.2.&lt;/p&gt;

			&lt;p&gt;Prior to Jelly Bean, the default behavior of the
			&lt;code&gt;exported&lt;/code&gt; field was that, if omitted, the
			content provider was assumed to be "exported" and accessible from
			other apps (subject to permissions). For example, the content
			provider below would be readable and writable by other apps (subject
			to permissions) when running on Android 4.1 or earlier. This default
			behavior is undesirable for sensitive data sources.&lt;/p&gt;

			&lt;pre&gt;&amp;lt;provider
			android:name=”com.example.ReadOnlyDataContentProvider”
			android:authorities=”com.example” /&amp;gt;&lt;/pre&gt;

			&lt;p&gt;Starting in Android 4.2, the default behavior for the same
			provider is now “not exported”, which prevents the possibility of
			inadvertent data sharing when the attribute is not declared. If
			either the &lt;code&gt;minSdkVersion&lt;/code&gt; or
			&lt;code&gt;targetSdkVersion&lt;/code&gt; of your app is set to 17 or
			higher, the content provider will no longer be accessible by other
			apps by default.&lt;/p&gt;

			&lt;p&gt;While this change helps to avoid inadvertent data sharing, it remains the
			best practice to &lt;em&gt;always explicitly declare the
			&lt;code&gt;exported&lt;/code&gt; attribute&lt;/em&gt;, as well as
			declaring proper permissions, to avoid confusion. In addition, we
			strongly encourage you to make use of &lt;a
			href="http://developer.android.com/tools/help/lint.html"&gt;Android
			Lint&lt;/a&gt;, which among other things will flag any exported
			content providers (implicit or explicit) that aren't protected by any
			permissions.&lt;/p&gt;

			&lt;h3 id="secure-random"&gt;New implementation of SecureRandom&lt;/h3&gt;

			&lt;p&gt;Android 4.2 includes a new default implementation of
			&lt;code&gt;&lt;a
			href="http://developer.android.com/reference/java/security/SecureRandom.html"&gt;SecureRandom&lt;/a&gt;&lt;/code&gt;
			based on OpenSSL. In the older Bouncy Castle-based implementation,
			given a known seed, &lt;code&gt;SecureRandom&lt;/code&gt; could
			technically (albeit incorrectly) be treated as a source of
			deterministic data. With the new OpenSSL-based implementation, this
			is no longer possible.&lt;/p&gt;

			&lt;p&gt;In general, the switch to the new &lt;code&gt;SecureRandom&lt;/code&gt;
			implementation should be transparent to apps. However, if your app is
			relying on &lt;code&gt;SecureRandom&lt;/code&gt; to generate
			deterministic data, such as keys for encrypting data, you may need to
			modify this area of your app. For example, if you have been using
			&lt;code&gt;SecureRandom&lt;/code&gt; to retrieve keys for
			encrypting/decrypting content, you will need to find another means of
			doing that. &lt;/p&gt;

			&lt;p&gt;A recommended approach is to generate a truly random AES key upon
			first launch and store that key in internal storage. Watch for
			details in a forthcoming post on Android cryptography.&lt;/p&gt;

			&lt;h3 id="javascript-access"&gt;JavascriptInterface methods in
			WebViews must now be annotated&lt;/h3&gt;

			&lt;p&gt;Javascript hosted in a &lt;code&gt;&lt;a
			href="https://developer.android.com/reference/android/webkit/WebView.html"&gt;WebView&lt;/a&gt;&lt;/code&gt;
			can directly invoke methods in an app through a JavaScript interface.
			In Android 4.1 and earlier, you could enable this by passing an
			object to the &lt;code&gt;&lt;a
			href="http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,
			java.lang.String)"&gt;addJavascriptInterface()&lt;/a&gt;&lt;/code&gt;
			method and ensuring that the object methods intended to be accessible
			from JavaScript were public.&lt;/p&gt;

			&lt;p&gt;On the one hand, this was a flexible mechanism; on the other hand, any
			untrusted content hosted in a WebView could potentially use
			reflection to figure out the public methods within the
			&lt;code&gt;JavascriptInterface&lt;/code&gt; object and could then
			make use of them. &lt;/p&gt;

			&lt;p&gt;Beginning in Android 4.2, you will now have to &lt;em&gt;explicitly annotate
			public methods&lt;/em&gt; with &lt;code&gt;&lt;a
			href="http://developer.android.com/reference/android/webkit/JavascriptInterface.html"&gt;@JavascriptInterface&lt;/a&gt;&lt;/code&gt;
			in order to make them accessible from hosted JavaScript. Note that
			this also only takes effect only if you have set your app's
			&lt;code&gt;minSdkVersion&lt;/code&gt; or
			&lt;code&gt;targetSdkVersion&lt;/code&gt; to 17 or higher.&lt;/p&gt;

			&lt;pre&gt;// Annotation is needed for SDK version 17 or above.
			@JavascriptInterface
			public void doSomething(String input) {
			. . .
			}&lt;/pre&gt;

			&lt;h3 id="secure-debugging"&gt;Secure USB debugging&lt;/h3&gt;

			&lt;p&gt;Android 4.2.2 introduces a new way of protecting your apps
			and data on compatible devices &amp;mdash; secure USB debugging. When
			enabled on a device, secure debugging ensures that only host
			computers authorized by the user can access the internals of a
			USB-connected device using the ADB tool included in the Android
			SDK.&lt;/p&gt;

			&lt;p&gt;Secure debugging is an extension of the ADB protocol that requires hosts to
			authenticate before accessing any ADB services or commands. At first
			launch, ADB generates an RSA key pair to uniquely identifies the
			host. Then, when you connect a device that requires secure debugging,
			the system displays an authorization dialog such as the one shown
			below. &lt;/p&gt;


			&lt;div class="separator" style="clear: both; text-align:
			center;margin:1.5em auto;"&gt;
			&lt;img border="0" width="420"
			src="http://1.bp.blogspot.com/-ak-KpU1tBWY/URwL4H1K2QI/AAAAAAAAB8I/7sQBdBaQQG0/s400/adb-crop-new.png"
			style="box-shadow: 3px 10px 18px 1px #bbb;margin:0;padding:0;"
			/&gt;&lt;/div&gt;

			&lt;p&gt;The user can allow USB debugging for the host for a single session or
			can give automatic access for all future sessions. Once a host is
			authorized, you can execute ADB commands for the device in the normal
			way. Until the device is authorized, it remains in "offline" state,
			as listed in the &lt;code&gt;adb devices&lt;/code&gt; command.
			&lt;/p&gt;

			&lt;p&gt;For developers, the change to USB debugging should be largely
			transparent. If you've updated your SDK environment to include ADB
			version 1.0.31 (available with SDK Platform-tools r16.0.1 and
			higher), all you need to do is connect and authorize your device(s).
			If your development device appears in "offline" state, you may need
			to update ADB. To so so, download the latest Platform Tools release
			through the SDK Manager.&lt;/p&gt;

			&lt;p&gt;Secure USB debugging is enabled in the Android 4.2.2 update that is now
			rolling out to Nexus devices across the world. We expect many more
			devices to enable secure debugging in the months ahead.&lt;/p&gt;


			&lt;h3 id="more-security" style="margin-top:1.5em;"&gt;More
			information about security best practices&lt;/h3&gt;

			&lt;p&gt;For a full list of security best practices for Android apps, make sure
			to take a look at the &lt;a
			href="http://developer.android.com/training/articles/security-tips.html"&gt;Security
			Tips&lt;/a&gt; document. &lt;/p&gt;
			&lt;div style="display: inline-block; float: right; line-height:
			0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/dqU4GC8ymnJ"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/dqU4GC8ymnJ"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/dqU4GC8ymnJ"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=Q204r-VOkgo:X2jSF4WBEOA:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=Q204r-VOkgo:X2jSF4WBEOA:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=Q204r-VOkgo:X2jSF4WBEOA:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/Q204r-VOkgo"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/5100495786509778676?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/5100495786509778676?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/Q204r-VOkgo/security-enhancements-in-jelly-bean.html"
			title="Security Enhancements in Jelly Bean" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://1.bp.blogspot.com/-ak-KpU1tBWY/URwL4H1K2QI/AAAAAAAAB8I/7sQBdBaQQG0/s72-c/adb-crop-new.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2013/02/security-enhancements-in-jelly-bean.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;DUAHSXw7fyp7ImA9WhNbEko.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-7572844686291126520
		</id>
		<published>2013-01-15T11:22:00.000-08:00</published>
		<updated>2013-01-15T11:22:18.207-08:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2013-01-15T11:22:18.207-08:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Google Play" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Developer Story" />
		<title>Android Developer Story: Smule</title>
		<content type="html">&lt;p&gt;Check out our latest Android developer
			story, this one from Smule, creators of &lt;a
			href="//play.google.com/store/apps/details?id=com.smule.autorap"&gt;AutoRap&lt;/a&gt;,
			&lt;a
			href="//play.google.com/store/apps/details?id=com.smule.magicpiano"&gt;Magic
			Piano&lt;/a&gt;, and &lt;a
			href="//play.google.com/store/apps/details?id=com.smule.songify"&gt;Songify&lt;/a&gt;.
			&lt;/p&gt;

			&lt;p&gt;In this short video, the Smule team talks about their experiences
			launching on Android, the explosive global growth they’ve seen on
			Google Play, and some of the techniques they use to market and
			monetize their products effectively across the world.&lt;/p&gt;
			&lt;br /&gt;
			&lt;iframe width="700" height="394"
			src="http://www.youtube.com/embed/RRelFvc6Czo" frameborder="0"
			allowfullscreen&gt;&lt;/iframe&gt;
			&lt;br /&gt;&lt;br /&gt;
			&lt;p style="clear:both"&gt;Visit the &lt;a
			href="http://developer.android.com/distribute/googleplay/spotlight/index.html"&gt;Spotlight
			pages&lt;/a&gt; in the Android Developers site to see our growing
			list of developer stories.&lt;/p&gt;
			&lt;div style="display: inline-block; float: right; line-height:
			0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/TpYdcpWjtXx"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/TpYdcpWjtXx"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/TpYdcpWjtXx"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=mLAfivj4_3g:ghShH4xEQ_k:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=mLAfivj4_3g:ghShH4xEQ_k:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=mLAfivj4_3g:ghShH4xEQ_k:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/mLAfivj4_3g"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/7572844686291126520?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/7572844686291126520?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/mLAfivj4_3g/android-developer-story-smule.html"
			title="Android Developer Story: Smule" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://img.youtube.com/vi/RRelFvc6Czo/default.jpg" height="72"
			width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2013/01/android-developer-story-smule.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;CEQCRns5fyp7ImA9WhNbEUQ.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-1251441085522210386
		</id>
		<published>2013-01-14T11:35:00.000-08:00</published>
		<updated>2013-01-14T11:39:27.527-08:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2013-01-14T11:39:27.527-08:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Renderscript" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Android 4.2" />
		<title>Evolution of Renderscript Performance</title>
		<content type="html">&lt;p&gt;&lt;em&gt;Posted by &lt;a
			href="https://plus.google.com/u/0/113680924389579925739/posts"&gt;R.
			Jason Sams&lt;/a&gt;, Android Renderscript Tech Lead
			&lt;/em&gt;&lt;/p&gt;

			&lt;p&gt;It’s been a year since the last &lt;a
			href="http://android-developers.blogspot.com/2012/01/levels-in-renderscript.html"&gt;blog
			post on Renderscript&lt;/a&gt;, and with the release of &lt;a
			href="http://developer.android.com/about/versions/jelly-bean.html"&gt;Android
			4.2&lt;/a&gt;, it’s a good time to talk about the performance work
			that we’ve done since then. One of the major goals of this past year
			was to improve the performance of common image-processing operations
			with Renderscript. &lt;/p&gt;

			&lt;div
			style="float:right;padding-top:1em;width:400px;margin-left:2em;"&gt;&lt;img
			src="http://1.bp.blogspot.com/-bkMcz05YEmA/UL_9hfL6XCI/AAAAAAAAB0c/j52VCLT1yM8/s400/jb-rs-chart-versions.png"
			alt="Renderscipt optimizations chart" width="360" height="252"
			style="border:1px solid #ddd;border-radius: 6px;" /&gt;&lt;br /&gt;
			&lt;p style="image-caption"&gt;&lt;strong&gt;Figure 1&lt;/strong&gt;.
			Renderscript image-processing benchmarks run on different Android
			platform versions (Android 4.0, 4.1, and 4.2) in CPU only on a Galaxy
			Nexus device.&lt;/p&gt;&lt;img
			src="http://2.bp.blogspot.com/-MIFjl2gjI-Y/UPRFlEpHMZI/AAAAAAAAB60/WaCCxnWI_rU/s400/jb-rs-chart-gpu.png"
			style="border:1px solid #ddd;border-radius: 6px; alt="" width="360"
			height="252" /&gt;&lt;br /&gt;

			&lt;p style="image-caption"&gt;&lt;strong&gt;Figure 2&lt;/strong&gt;.
			Renderscript image-processing benchmarks comparing operations run
			with GPU + CPU to those run in CPU only on the same Nexus 10
			device.&lt;/p&gt;&lt;/div&gt;

			&lt;p&gt;When you set out to improve performance, the first task is to measure it.
			To do this, we built a image-processing benchmark suite. The tests
			measure how long it takes to apply a given image processing operation
			to a roughly 1.7 million pixel bitmap. We then ran the benchmark
			using the same APK on the Galaxy Nexus and normalized the results
			from Ice Cream Sandwich to 1.0. &lt;/p&gt;

			&lt;p&gt;We made a few major improvements between ICS and Jelly Bean, which
			significantly reduced the overhead of short scripts as well as the
			cost of getting elements out of allocations. Going from Android 4.1
			to Android 4.2, we added a number of performance improvements to the
			math library. Our hardware partners also made major contributions;
			ARM in particular provided numerous compiler improvements which
			greatly improved our ability to generate vector code. &lt;/p&gt;

			&lt;p&gt;Android 4.2 introduced another much more important change:
			For the first time on any mobile platform. we can use the GPU as a
			compute device. When run on a device that supports GPU compute, that
			same benchmark APK will run on the GPU. The chart in Figure 2 is
			normalized to the same basis as Figure 1.&lt;/p&gt;

			&lt;p&gt;The Cortex A15 in Nexus 10 is a very good CPU. However, that doesn’t
			mean we should leave resources idle. The Mali T604 is a very flexible
			and capable compute device capable of executing a large subset of
			RenderScript functionality. The green bar in Figure 2 shows what we
			can do when the Mali is enabled for RS compute. No effort is required
			on an app developer's part to enable this acceleration; the device
			will inspect each script and decide which processor to run things
			automatically. It’s important to note that some scripts can’t be run
			on the GPU, and such scripts will automatically run on the
			CPU.&lt;/p&gt;

			&lt;p&gt;The best part is it doesn’t end here. Performance work is an ongoing
			effort. RenderScript performance in applications will continue to
			improve over time as we continue to improve the platform.&lt;/p&gt;

			&lt;p&gt;To learn more about using Renderscript, see the &lt;a
			href="http://developer.android.com/guide/topics/renderscript/compute.html"&gt;Renderscript
			Computation&lt;/a&gt; developer's guide.&lt;/p&gt;
			&lt;div style="display: inline-block; float: right; line-height:
			0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/1zVah8tVN27"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/1zVah8tVN27"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/1zVah8tVN27"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=arXjXmtUW3o:uhcOi7fUDmQ:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=arXjXmtUW3o:uhcOi7fUDmQ:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=arXjXmtUW3o:uhcOi7fUDmQ:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/arXjXmtUW3o"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/1251441085522210386?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/1251441085522210386?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/arXjXmtUW3o/evolution-of-renderscript-performance.html"
			title="Evolution of Renderscript Performance" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://2.bp.blogspot.com/-MIFjl2gjI-Y/UPRFlEpHMZI/AAAAAAAAB60/WaCCxnWI_rU/s72-c/jb-rs-chart-gpu.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2013/01/evolution-of-renderscript-performance.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;CUICRHk8fCp7ImA9WhNUFko.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-7627603220126702286
		</id>
		<published>2013-01-08T09:01:00.000-08:00</published>
		<updated>2013-01-08T11:32:45.774-08:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2013-01-08T11:32:45.774-08:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Google Play services" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Authentication" />
		<title>Verifying Back-End Calls from Android Apps</title>
		<content type="html">&lt;p&gt;&lt;em&gt;Posted by &lt;a
			href="https://plus.google.com/107606703558161507946/posts"&gt;Tim
			Bray&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

			&lt;div itemprop="image" class="separator" style="clear: both;
			float:left;"&gt;
			&lt;img border="0"
			src="https://lh4.ggpht.com/7z4NItEg-X21zvFGAarKonk-VaysBYthJ30u1JjaQ0-5fjyHNawnmoNeG--4FCACog=w160"
			/&gt;&lt;/div&gt;

			&lt;p itemprop="description"&gt;Most Android apps have some sort of
			server-side back end, to persist and share data. Even the most basic
			game needs to remember its players’ high scores. When you’re building
			your back end, one problem you have to solve is how the back-end code
			knows what app it’s talking to and who the person using it is.
			&lt;/p&gt;

			&lt;p&gt;You probably have HTTP endpoints for communicating with your client
			apps, but how can the server-side code be sure who’s sending messages
			to it? After all, anyone can send HTTP POST requests from anywhere;
			could they impersonate your users if they could guess their
			identities?&lt;/p&gt;

			&lt;p&gt;It’s really user-unfriendly to ask people to type in usernames and
			passwords on mobile devices. In particular, if someone has installed
			your app and given it permission to use the Internet and know your
			identity, they shouldn’t be pestered any more.&lt;/p&gt;

			&lt;p&gt;It turns out that &lt;a
			href="http://developer.android.com/google/play-services/index.html"&gt;Google
			Play services&lt;/a&gt;, now available on every compatible device
			running Android release 2.2 or higher, offers a good solution to this
			problem, based on the use of Google Accounts.&lt;/p&gt;

			&lt;h3&gt;Summary&lt;/h3&gt;

			&lt;p&gt;Doing this is a multi-step process, which I’ll outline in full, but here’s
			the short version: You use the &lt;a
			href="http://developer.android.com/reference/com/google/android/gms/auth/GoogleAuthUtil.html"&gt;&lt;code&gt;GoogleAuthUtil&lt;/code&gt;&lt;/a&gt;
			class, available through Google Play services, to retrieve a string
			called an “ID Token”. You send the token to your back end and your
			back end can use it to quickly and cheaply verify which app sent it
			and who was using the app. &lt;/p&gt;

			&lt;div class="separator" style="clear: both; text-align: center;"&gt;
			&lt;img border="0" height="198" width="400"
			src="http://3.bp.blogspot.com/-EtecxvwBnt8/UOt4yZDkE9I/AAAAAAAAB5U/7Rp3v_WGPGo/s400/hy.png"
			/&gt;&lt;/div&gt;

			&lt;p&gt;This capability is built into Google facilities such as App Engine’s new
			&lt;a href="http://endpoints-trusted-tester.appspot.com"&gt;Cloud
			Endpoints&lt;/a&gt; feature, which bakes app/back-end identity into a
			simple programming model.&lt;/p&gt;

			Now let’s get to the details.&lt;/p&gt;

			&lt;h3&gt;App Registration&lt;/h3&gt;

			&lt;p&gt;You’re going to have to use the &lt;a
			href="http://code.google.com/apis/console"&gt;Google API
			Console&lt;/a&gt; quite a bit in this process. You’ll need to make a
			new project for this purpose; while you can give it a nice
			human-readable name and graphical branding, it turns out that those
			resources aren’t used in this particular scenario. &lt;/p&gt;

			&lt;p&gt;You can also authorize this project to access a large number
			of different Google APIs; but once again, you don’t need to in this
			scenario.&lt;/p&gt;

			&lt;p&gt;You should give serious thought to the people you authorize as members
			of the project, since these are important administrative
			roles.&lt;/p&gt;

			&lt;h3&gt;Make Client IDs&lt;/h3&gt;

			&lt;p&gt;You’ll need to make two different OAuth 2.0 “Client IDs” for your project.
			The first one is a “Client ID for Web applications”. Once again, you
			can ignore all the labeling and branding stuff, you’ll just need the
			Client-ID string, which will look something like
			&lt;code&gt;9414861317621.apps.googleusercontent.com&lt;/code&gt;.&lt;/p&gt;

			&lt;p&gt;Now you’ll need to make another Client ID for your Android
			app. To do this, you’ll need to provide two pieces of information:
			your app’s package name and cert signature. The package name is just
			the Java-style reverse-DNS, as given in the top-level “package”
			attribute in your AndroidManifest.xml, for example
			&lt;code&gt;com.example.identity&lt;/code&gt;.&lt;/p&gt;

			&lt;p&gt;To get your app’s cert signature, use the following shell
			command:&lt;/p&gt;

			&lt;pre&gt;$ keytool -exportcert -alias &amp;lt;your-key-name&amp;gt; -keystore
			&amp;lt;your-key-store-file&amp;gt; -v -list&lt;/pre&gt;

			&lt;p&gt;Copy the octets labeled “SHA1”, paste them into the
			Developer Console field, and create your app’s Client ID. Once again,
			all you’ll really need from the readout is the Client-ID
			string.&lt;/p&gt;

			&lt;h3&gt;In Your Android App&lt;/h3&gt;

			&lt;p&gt;You’ll need to call the Google Play services &lt;a
			href="http://developer.android.com/reference/com/google/android/gms/auth/GoogleAuthUtil.html#getToken(android.content.Context,
			java.lang.String,
			java.lang.String)"&gt;&lt;code&gt;GoogleAuthUtil&lt;/code&gt;&lt;/a&gt;
			class to get an ID token; the procedure is as described in &lt;a
			href="http://developer.android.com/google/play-services/auth.html#obtain"&gt;Obtaining
			an Access Token&lt;/a&gt;. There’s one extra bit of magic: the value
			of the &lt;code&gt;scope&lt;/code&gt; argument to the
			&lt;code&gt;getToken(email, scope)&lt;/code&gt; method. It has to be
			the string &lt;code&gt;audience:server:client_id:X&lt;/code&gt;,
			where X is the Client ID of for the Web app, as described above. If
			our Client ID were the example value given above, the value of the
			scope argument would be
			&lt;code&gt;audience:server:client_id:9414861317621.apps.googleusercontent.com&lt;/code&gt;.&lt;/p&gt;

			&lt;h3&gt;Magic Happens&lt;/h3&gt;

			&lt;p&gt;Normally, when you ask for an OAuth token, the person using the device sees a
			challenge, asking them if it’s OK to use their identity to get at
			some resource or other. But in this case, the system looks at the
			server-side Client ID in your scope argument, notices that it’s in
			the same project as your Android app, and gives you the token without
			pestering the user; they’ve already agreed to a relationship with
			you, the developer who controls that project.&lt;/p&gt;

			&lt;h3&gt;Send the Token&lt;/h3&gt;

			&lt;p&gt;When you’re ready to start talking to your server back end, you need to
			send the token string to it. The best way to do this is in the body
			of an POST message; you could put it in a URL parameter, but they’re
			often logged. You absolutely &lt;em&gt;&lt;strong&gt;must use an
			HTTPS connection&lt;/strong&gt;&lt;/em&gt;, to keep any
			men-in-the-middle from peeking at your token. &lt;/p&gt;

			&lt;p&gt;There’s no particular reason for extra round-trips; if
			you’re sending a game high score to your back end, just stick the ID
			Token string in as an extra argument.&lt;/p&gt;

			&lt;h3&gt;Use the Token&lt;/h3&gt;

			&lt;p&gt;When your server receives the token from your Android app, it’s really
			important that you verify it. This requires two steps:&lt;/p&gt;

			&lt;ol style="margin-bottom:1em;"&gt;
			&lt;li&gt;Verify that it’s really signed by Google.&lt;/li&gt;
			&lt;li&gt;Verify that it’s really meant for you.&lt;/li&gt;
			&lt;/ol&gt;

			&lt;h3&gt;Verify Signature&lt;/h3&gt;

			&lt;p&gt;It turns out that this is signed using a Google public/private key
			pair, and Google publishes the public keys (which we change
			regularly) at &lt;a
			href="https://www.googleapis.com/oauth2/v1/certs"&gt;www.googleapis.com/oauth2/v1/certs&lt;/a&gt;;
			go ahead and have a look. &lt;/p&gt;

			&lt;p&gt;You have to verify that the ID Token, which is actually a &lt;a
			href="http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-05"&gt;JSON
			Web Token&lt;/a&gt;, was signed with one of those certs. Fortunately,
			there are decent libraries around to do this; in this post, I’ll give
			pointers for Java, Ruby, and PHP.&lt;/p&gt;

			&lt;p&gt;The libraries can cache the Google certs and only refresh them when
			required, so the verification is (almost always) a fast static
			call.&lt;/p&gt;

			&lt;h3&gt;Verify Token Fields&lt;/h3&gt;

			&lt;p&gt;It turns out that the ID Token has a JSON payload, and most libraries
			that validate the signatures also give it to you as a hash or
			dictionary or whatever. Thus, you can retrieve named fields, such as
			&lt;code&gt;aud&lt;/code&gt; and &lt;code&gt;cid&lt;/code&gt; and
			&lt;code&gt;email&lt;/code&gt;.&lt;/p&gt;

			&lt;p&gt;First, you have to look at the field named &lt;code&gt;aud&lt;/code&gt; and
			verify that it’s identical to your Client ID, the string you included
			in the Android app’s scope argument. Seriously,
			&lt;em&gt;&lt;strong&gt;do not omit this
			step&lt;/strong&gt;&lt;/em&gt;; if you don't verify the ID Token,
			then any other developer can spoof requests to your
			service.&lt;/p&gt;

			&lt;p&gt;Optionally, you can look at the field named &lt;code&gt;cid&lt;/code&gt; and
			verify that it is identical to the Client ID of your Android app. By
			the way, you can have multiple different Android client apps, each
			with its own Client ID, in that top-level project.&lt;/p&gt;

			&lt;p&gt;Let’s assume you’ve done all three of these things. Then,
			you know that:&lt;/p&gt;

			&lt;ol&gt;
			&lt;li&gt;The token was issued by Google.&lt;/li&gt;
			&lt;li&gt;The token was sent to a device that was being operated by the person
			identified in the payload's &lt;code&gt;email&lt;/code&gt;
			field.&lt;/li&gt;
			&lt;/ol&gt;

			&lt;p&gt;You also have high confidence that:&lt;/p&gt;

			&lt;ol start="3"&gt;
			&lt;li&gt;The token was obtained by the Android app identified by the Client ID in
			the payload’s &lt;code&gt;cid&lt;/code&gt; field.&lt;/li&gt;
			&lt;/ol&gt;

			&lt;p&gt;The Client ID only has “high confidence” because non-compatible or
			rooted Android devices may be able to tamper with that information.
			But they won't be able to fake the Google signature or the
			authentication of the device user to Google.&lt;/p&gt;

			&lt;h3&gt;What’s Next?&lt;/h3&gt;

			&lt;p&gt;That’s up to you. You know which person and app you’re talking to, it’s up
			to you what to do with that information.&lt;/p&gt;

			&lt;h3&gt;Code Fragments&lt;/h3&gt;

			&lt;p&gt;Here’s a Java class that implements an ID-Token checker using the Google
			Java libraries:&lt;/p&gt;

			&lt;pre&gt;import java.io.IOException;
			import java.security.GeneralSecurityException;

			import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
			import com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier;
			import com.google.api.client.http.javanet.NetHttpTransport;
			import com.google.api.client.json.JsonFactory;
			import com.google.api.client.json.gson.GsonFactory;

			public class Checker {

			private final List&lt;String&gt; mClientIDs;
			private final String mAudience;
			private final GoogleIdTokenVerifier mVerifier;
			private final JsonFactory mJFactory;
			private String mProblem = "Verification failed. (Time-out?)";

			public Checker(String[] clientIDs, String audience) {
			mClientIDs = Arrays.asList(clientIDs);
			mAudience = audience;
			NetHttpTransport transport = new NetHttpTransport();
			mJFactory = new GsonFactory();
			mVerifier = new GoogleIdTokenVerifier(transport, mJFactory);
			}

			public GoogleIdToken.Payload check(String tokenString) {
			GoogleIdToken.Payload payload = null;
			try {
			GoogleIdToken token = GoogleIdToken.parse(mJFactory, tokenString);
			if (mVerifier.verify(token)) {
			GoogleIdToken.Payload tempPayload = token.getPayload();
			if (!tempPayload.getAudience().equals(mAudience))
			mProblem = "Audience mismatch";
			else if (!mClientIDs.contains(tempPayload.getIssuee()))
			mProblem = "Client ID mismatch";
			else
			payload = tempPayload;
			}
			} catch (GeneralSecurityException e) {
			mProblem = "Security issue: " + e.getLocalizedMessage();
			} catch (IOException e) {
			mProblem = "Network problem: " + e.getLocalizedMessage();
			}
			return payload;
			}

			public String problem() {
			return mProblem;
			}
			}&lt;/pre&gt;

			&lt;p&gt;If you wanted to do this in Ruby, you’d want to install the
			google-id-token Ruby gem, and do something like this:&lt;/p&gt;

			&lt;pre&gt;require 'google-id-token'
			validator = GoogleIDToken::Validator.new
			jwt = validator.check(token, required_audience, required_client_id)
			if jwt
			email = jwt['email']
			else
			report "Cannot validate: #{validator.problem}"
			end&lt;/pre&gt;

			&lt;p&gt;For PHP programmers, check out the &lt;a
			href="https://code.google.com/p/google-api-php-client/"&gt;Google
			APIs Client Library for PHP&lt;/a&gt;, in particular the function
			verifyIdToken in &lt;a
			href="https://code.google.com/p/google-api-php-client/source/browse/trunk/src/auth/apiOAuth2.php?r=445"&gt;apiOAuth2.php&lt;/a&gt;.&lt;/p&gt;
			&lt;div style="display: inline-block; float: right; line-height:
			0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/PfZV27hX2mL"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/108967384991768947849/posts/PfZV27hX2mL"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/PfZV27hX2mL"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=wbxhQV8JlAg:BsQRzvbtoQQ:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=wbxhQV8JlAg:BsQRzvbtoQQ:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=wbxhQV8JlAg:BsQRzvbtoQQ:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/wbxhQV8JlAg"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/7627603220126702286?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/7627603220126702286?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/wbxhQV8JlAg/verifying-back-end-calls-from-android.html"
			title="Verifying Back-End Calls from Android Apps" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://3.bp.blogspot.com/-EtecxvwBnt8/UOt4yZDkE9I/AAAAAAAAB5U/7Rp3v_WGPGo/s72-c/hy.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2013/01/verifying-back-end-calls-from-android.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;CU8MSHk8fip7ImA9WhNVFkk.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-8397590263310614380
		</id>
		<published>2012-12-27T13:09:00.000-08:00</published>
		<updated>2012-12-27T13:31:29.776-08:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-12-27T13:31:29.776-08:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Daydream" />
		<category scheme="http://www.blogger.com/atom/ns#" term="User Interface" />
		<title>Daydream: Interactive Screen Savers</title>
		<content type="html">&lt;em&gt;Posted by Daniel Sandler, a software
			engineer on the Android System UI team&lt;/em&gt;&lt;div
			style="float:right;padding-right:0"&gt;&lt;img
			src="http://3.bp.blogspot.com/-8s5LkLutYBU/UNSwENBoD9I/AAAAAAAAB38/AAWIZcW9PBI/s400/daydreams_dsandler_headshot.png"
			alt="Daydream" width="190"
			style="margin-bottom:0;margin-right:1em;padding:0 1.5em 1.5em
			1.5em;"&gt;
			&lt;/div&gt;

			&lt;p&gt;I’ve always loved screen savers. Supposedly they exist for a practical
			purpose: protecting that big, expensive monitor from the ghosts of
			spreadsheets past.&lt;/p&gt;

			&lt;p&gt;But I’ve always imagined that your computer is secretly hoping you’ll
			stand up and walk away for a bit. Just long enough for that idle
			timer to expire…so it can run off and play for a little while. Draw a
			picture, set off fireworks, explore the aerodynamics of kitchen
			appliances, whatever—while always ready to get back to work at a
			keystroke or nudge of the mouse.&lt;/p&gt;

			&lt;p&gt;Daydream, new in Android 4.2, brings this kind of laid-back, whimsical
			experience to Android phones and tablets that would otherwise be
			sleeping. If you haven’t checked it out, you can turn it on in the
			Settings app, in &lt;strong&gt;Display&lt;/strong&gt; &amp;gt;
			&lt;strong&gt;Daydream&lt;/strong&gt;; touch &lt;strong&gt;When to
			Daydream&lt;/strong&gt; to enable the feature when
			charging.&lt;/p&gt;

			&lt;h3&gt;An attract mode for apps&lt;/h3&gt;
			&lt;p&gt;Apps that support Daydream can take advantage of the full Android UI
			toolkit in this mode, which means it’s easy to take existing
			components of your app &amp;mdash; including layouts, animations, 3D,
			and custom views—and remix them for a more ambient presentation. And
			since you can use touchscreen input in this mode as well, you can
			provide a richly interactive experience if you choose.&lt;/p&gt;

			&lt;p&gt;Daydream provides an opportunity for your app to show off a
			little bit. You can choose to hide some of your app’s complexity in
			favor of one or more visually compelling experiences that can
			entertain from across a room, possibly drawing the user into your
			full app, like a video game’s &lt;a
			href="http://en.wikipedia.org/wiki/Attract_mode"&gt;attract
			mode&lt;/a&gt;.&lt;/p&gt;

			&lt;div style="margin:1.5em 3em;width:80%"&gt;&lt;img
			src="http://3.bp.blogspot.com/-wVsUOo4xGE0/UNy9mZ1nmMI/AAAAAAAAB4w/f6rhyLn5KbI/s1600/daydream-example.jpg"
			width="100%" /&gt;&lt;p class="image-caption"
			style="padding-left:.5em;padding-top:0;margin-top:0"&gt;&lt;strong&gt;Figure
			1&lt;/strong&gt;. Google Currents scrolls stories past in a smooth,
			constantly-moving wall of news.&lt;/p&gt;&lt;/div&gt;

			&lt;p&gt;Google Currents is a great example of this approach: as a Daydream, it
			shows a sliding wall of visually-interesting stories selected from
			your editions. Touch a story, however, and Currents will show it to
			you full-screen; touch again to read it in the full Currents
			app.&lt;/p&gt;

			&lt;h3&gt;The architecture of a Daydream&lt;/h3&gt;

			&lt;p&gt;Each Daydream implementation is a subclass of &lt;a
			href="http://developer.android.com/reference/android/service/dreams/DreamService.html"&gt;&lt;code&gt;android.service.dreams.DreamService&lt;/code&gt;&lt;/a&gt;.
			When you extend &lt;code&gt;DreamService&lt;/code&gt;, you’ll have
			access to a simple Activity-like lifecycle API.&lt;/p&gt;

			&lt;p&gt;Key methods on &lt;code&gt;DreamService&lt;/code&gt; to
			override in your subclass (don’t forget to call the superclass
			implementation):&lt;/p&gt;
			&lt;ul&gt;
			&lt;li&gt;&lt;a
			href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onAttachedToWindow()"&gt;&lt;code&gt;onAttachedToWindow()&lt;/code&gt;&lt;/a&gt;
			&amp;mdash; Use this for initial setup, such as calling
			&lt;code&gt;setContentView()&lt;/code&gt;.&lt;/li&gt;
			&lt;li&gt;&lt;a
			href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onDreamingStarted()"&gt;&lt;code&gt;onDreamingStarted()&lt;/code&gt;&lt;/a&gt;
			&amp;mdash; start your animations and timers&lt;/li&gt;
			&lt;li&gt;&lt;a
			href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onDreamingStopped()"&gt;&lt;code&gt;onDreamingStopped()&lt;/code&gt;&lt;/a&gt;
			&amp;mdash; stop animations&lt;/li&gt;
			&lt;li&gt;&lt;a
			href="http://developer.android.com/reference/android/service/dreams/DreamService.html#onDetachedFromWindow()"&gt;&lt;code&gt;onDetachedFromWindow()&lt;/code&gt;&lt;/a&gt;
			&amp;mdash; tear down anything you built in
			&lt;code&gt;onAttachedToWindow()&lt;/code&gt;&lt;/li&gt;
			&lt;/ul&gt;

			&lt;p&gt;Important methods on DreamService that you may want to call:&lt;/p&gt;

			&lt;ul&gt;
			&lt;li&gt;&lt;a
			href="http://developer.android.com/reference/android/service/dreams/DreamService.html#setContentView(android.view.View)"&gt;&lt;code&gt;setContentView()&lt;/code&gt;&lt;/a&gt;
			&amp;mdash; set the scene for your Daydream. Can be a layout XML
			resource ID or an instance of &lt;code&gt;View&lt;/code&gt;, even a
			custom &lt;code&gt;View&lt;/code&gt; you implement
			yourself.&lt;/li&gt;
			&lt;li&gt;&lt;a
			href="http://developer.android.com/reference/android/service/dreams/DreamService.html#setInteractive(boolean)"&gt;&lt;code&gt;setInteractive(boolean)&lt;/code&gt;&lt;/a&gt;
			&amp;mdash; by default, your Daydream will exit if the user touches
			the screen, like a classic screen saver. If you want the user to be
			able to touch and interact with your Views, call
			&lt;code&gt;setInteractive(true)&lt;/code&gt;.&lt;/li&gt;
			&lt;li&gt;&lt;a
			href="http://developer.android.com/reference/android/service/dreams/DreamService.html#setFullscreen(boolean)"&gt;&lt;code&gt;setFullscreen(boolean)&lt;/code&gt;&lt;/a&gt;
			&amp;mdash; convenience method for hiding the status bar (see &lt;a
			href="#hide-status"&gt;below&lt;/a&gt;).&lt;/li&gt;
			&lt;li&gt;&lt;a
			href="http://developer.android.com/reference/android/service/dreams/DreamService.html#setScreenBright(boolean)"&gt;&lt;code&gt;setScreenBright(boolean)&lt;/code&gt;&lt;/a&gt;
			&amp;mdash; by default, Daydreams keep the screen on at full
			brightness, which may not be appropriate for some situations (for
			example, dark rooms); setting this to false will reduce the display
			brightness to a very low level.&lt;/li&gt;
			&lt;/ul&gt;

			&lt;p&gt;Finally, to advertise your Daydream to the system, create a
			&lt;code&gt;&amp;lt;service&amp;gt;&lt;/code&gt; for it in your
			AndroidManifest.xml:&lt;/service&gt;&lt;/p&gt;

			&lt;pre&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&gt;
			&amp;lt;manifest
			xmlns:android="http://schemas.android.com/apk/res/android"
			package="com.example.app"&gt;
			&amp;lt;uses-sdk android:targetSdkVersion="17" android:minSdkVersion="17" /&gt;

			&amp;lt;application&gt;
			&amp;lt;service
			android:name=".ExampleDaydream"
			android:exported="true"
			android:label="@string/my_daydream_name"&gt;
			&amp;lt;intent-filter&gt;
			&amp;lt;action android:name="android.service.dreams.DreamService" /&gt;
			&amp;lt;category android:name="android.intent.category.DEFAULT" /&gt;
			&amp;lt;/intent-filter&gt;
			&amp;lt;meta-data
			android:name="android.service.dream"
			android:resource="@xml/dream_info" /&gt;
			&amp;lt;/service&gt;
			&amp;lt;/application&gt;
			&amp;lt;/manifest&gt;&lt;/pre&gt;

			&lt;p&gt;The &lt;code&gt;&amp;lt;meta-data&amp;gt;&lt;/code&gt; tag is optional;
			it allows you to point to an XML resource that specifies a settings
			Activity specific to your Daydream. The user can reach it by tapping
			the settings icon next to your Daydream’s name in the Settings
			app.&lt;/p&gt;

			&lt;pre&gt;&amp;lt;!-- res/xml/dream_info.xml --&amp;gt;
			&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
			&amp;lt;dream xmlns:android="http://schemas.android.com/apk/res/android"
			android:settingsActivity="com.example.app/.ExampleDreamSettingsActivity"
			/&amp;gt&lt;/pre&gt;

			&lt;p&gt;Here's an example to get you going: a classic screen saver, the bouncing
			logo, implemented using a &lt;a
			href="http://developer.android.com/reference/android/animation/TimeAnimator.html"&gt;TimeAnimator&lt;/a&gt;
			to give you buttery-smooth 60Hz animation.&lt;/p&gt;


			&lt;div style="padding:1.5em 3em 1.5em 5em;width:80%"&gt;&lt;img
			src="https://lh5.googleusercontent.com/p2lXdJlttrytQZPk1IJpk6ubvVZjo-NGOzsRYaHXgzKkFw4RzbxTcX0eXr1fH7iuAyesycl7JZaSAvUOx5FDgf0W9DS_kwoUll5BrlhoxibQfVnnAxRx"
			width="100%" /&gt;&lt;p class="image-caption"
			style="padding-left:.5em;padding-top:0;margin-top:0"&gt;&lt;strong&gt;Figure
			2&lt;/strong&gt;. Will one of them hit the
			corner?&lt;/p&gt;&lt;/div&gt;

			&lt;pre&gt;public class BouncerDaydream extends DreamService {
			@Override
			public void onDreamingStarted() {
			super.onDreamingStarted();

			// Our content view will take care of animating its children.
			final Bouncer bouncer = new Bouncer(this);
			bouncer.setLayoutParams(new
			ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));
			bouncer.setSpeed(200); // pixels/sec

			// Add some views that will be bounced around.
			// Here I'm using ImageViews but they could be any kind of
			// View or ViewGroup, constructed in Java or inflated from
			// resources.
			for (int i=0; i&amp;lt;5; i++) {
			final FrameLayout.LayoutParams lp
			= new FrameLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
			final ImageView image = new ImageView(this);
			image.setImageResource(R.drawable.android);
			image.setBackgroundColor(0xFF004000);
			bouncer.addView(image, lp);
			}

			setContentView(bouncer);
			}
			}

			public class Bouncer extends FrameLayout implements
			TimeAnimator.TimeListener {
			private float mMaxSpeed;
			private final TimeAnimator mAnimator;
			private int mWidth, mHeight;

			public Bouncer(Context context) {
			this(context, null);
			}

			public Bouncer(Context context, AttributeSet attrs) {
			this(context, attrs, 0);
			}

			public Bouncer(Context context, AttributeSet attrs, int flags) {
			super(context, attrs, flags);
			mAnimator = new TimeAnimator();
			mAnimator.setTimeListener(this);
			}

			/**
			* Start the bouncing as soon as we’re on screen.
			*/
			@Override
			public void onAttachedToWindow() {
			super.onAttachedToWindow();
			mAnimator.start();
			}

			/**
			* Stop animations when the view hierarchy is torn down.
			*/
			@Override
			public void onDetachedFromWindow() {
			mAnimator.cancel();
			super.onDetachedFromWindow();
			}

			/**
			* Whenever a view is added, place it randomly.
			*/
			@Override
			public void addView(View v, ViewGroup.LayoutParams lp) {
			super.addView(v, lp);
			setupView(v);
			}

			/**
			* Reposition all children when the container size changes.
			*/
			@Override
			protected void onSizeChanged (int w, int h, int oldw, int oldh) {
			super.onSizeChanged(w, h, oldw, oldh);
			mWidth = w;
			mHeight = h;
			for (int i=0; i&amp;lt;getChildCount(); i++) {
			setupView(getChildAt(i));
			}
			}

			/**
			* Bouncing view setup: random placement, random velocity.
			*/
			private void setupView(View v) {
			final PointF p = new PointF();
			final float a = (float) (Math.random()*360);
			p.x = mMaxSpeed * (float)(Math.cos(a));
			p.y = mMaxSpeed * (float)(Math.sin(a));
			v.setTag(p);
			v.setX((float) (Math.random() * (mWidth - v.getWidth())));
			v.setY((float) (Math.random() * (mHeight - v.getHeight())));
			}

			/**
			* Every TimeAnimator frame, nudge each bouncing view along.
			*/
			public void onTimeUpdate(TimeAnimator animation, long elapsed, long dt_ms)
			{
			final float dt = dt_ms / 1000f; // seconds
			for (int i=0; i&amp;lt;getChildCount(); i++) {
			final View view = getChildAt(i);
			final PointF v = (PointF) view.getTag();

			// step view for velocity * time
			view.setX(view.getX() + v.x * dt);
			view.setY(view.getY() + v.y * dt);

			// handle reflections
			final float l = view.getX();
			final float t = view.getY();
			final float r = l + view.getWidth();
			final float b = t + view.getHeight();
			boolean flipX = false, flipY = false;
			if (r &amp;gt; mWidth) {
			view.setX(view.getX() - 2 * (r - mWidth));
			flipX = true;
			} else if (l &amp;lt; 0) {
			view.setX(-l);
			flipX = true;
			}
			if (b &amp;gt; mHeight) {
			view.setY(view.getY() - 2 * (b - mHeight));
			flipY = true;
			} else if (t &amp;lt; 0) {
			view.setY(-t);
			flipY = true;
			}
			if (flipX) v.x *= -1;
			if (flipY) v.y *= -1;
			}
			}

			public void setSpeed(float s) {
			mMaxSpeed = s;
			}
			}&lt;/pre&gt;

			&lt;p&gt;This example code is handy for anything you want to show the user without
			burning it into the display (like a simple graphic or an error
			message), and it also makes a great starting point for more complex
			Daydream projects.&lt;/p&gt;

			&lt;h3&gt;A few more idle thoughts&lt;/h3&gt;

			&lt;ul&gt;
			&lt;li&gt;&lt;strong&gt;First, do no harm&lt;/strong&gt;: Daydream is meant to run when a device is
			charging. However, if the Daydream consumes too much CPU, charging
			might happen very slowly or not at all! The system will stop your
			Daydream if it detects that the device is not charging, so make sure
			your code leaves enough power to charge the battery in a reasonable
			amount of time.&lt;/li&gt;
			&lt;li&gt;&lt;strong&gt;Respect the lockscreen&lt;/strong&gt;: Daydream runs on top of the secure
			keyguard, which means that if you might be showing sensitive content,
			you need to give the user tools to control that content. For example,
			Photo Table and Photo Frame allow the user to select the albums from
			which photos will be displayed (avoiding embarrassing
			slideshows).&lt;/li&gt;
			&lt;li&gt;&lt;strong&gt;Screen brightness&lt;/strong&gt;: Think about where you expect your
			Daydream to be used and adjust the screen brightness accordingly
			using &lt;a
			href="http://developer.android.com/reference/android/service/dreams/DreamService.html#setScreenBright(boolean)"&gt;&lt;code&gt;setScreenBright()&lt;/code&gt;&lt;/a&gt;
			and possibly even using darker or brighter colors as necessary. A
			bedside clock will need to be dimmer than a desk clock; if you expect
			your Daydream to serve both purposes you'll need to give the user a
			choice.&lt;/li&gt;
			&lt;li id="hide-status"&gt;&lt;strong&gt;To hide the status bar or
			not&lt;/strong&gt;: Many users will need instant access to the
			battery level and time of day, so you should avoid using &lt;a
			href="http://developer.android.com/reference/android/service/dreams/DreamService.html#setFullscreen(boolean)"&gt;&lt;code&gt;setFullscreen()&lt;/code&gt;&lt;/a&gt;,
			particularly if your Daydream is more informational than artistic.
			Daydream will start with the status bar in “lights out” mode (&lt;a
			href="http://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LOW_PROFILE"&gt;&lt;code&gt;View.SYSTEM_UI_FLAG_LOW_PROFILE&lt;/code&gt;&lt;/a&gt;),
			where it’s quite unobtrusive but still shows the clock and charge
			status.&lt;/li&gt;
			&lt;li&gt;&lt;strong&gt;When to use settings&lt;/strong&gt;: In general, you have a little
			latitude for adding extra knobs and dials to Daydream settings. After
			all, this is a personalization feature, so users should be encouraged
			to tweak things until they feel at home. Sometimes, though, a more
			compelling experience can come from taking an artistic stand: giving
			the user a choice from a small number of polished, beautiful
			configurations (rather than providing all the controls of a
			commercial airline cockpit).&lt;/li&gt;
			&lt;li&gt;&lt;strong&gt;There can be more than one&lt;/strong&gt;: If you discover that your
			settings allow the user to pick between a few radically different
			display modes, consider splitting your Daydream into multiple
			DreamService implementations. For example, the photo gallery in
			Android 4.2 provides both the Photo Table and Photo Frame
			Daydreams.&lt;/li&gt;
			&lt;li&gt;&lt;strong&gt;Use an Activity for development&lt;/strong&gt;: Most Android development
			tools are optimized for developing and debugging conventional Android
			apps; since &lt;code&gt;DreamService&lt;/code&gt; and
			&lt;code&gt;Activity&lt;/code&gt; are so similar, it can be useful to
			create a testing &lt;code&gt;Activity&lt;/code&gt; that hosts the
			same content view as your &lt;code&gt;DreamService&lt;/code&gt;. This
			way you can launch and test your code easily from your IDE as if it
			were any other Android project.&lt;/li&gt;
			&lt;/ul&gt;

			&lt;p&gt;OK, that’s enough for now; you have the tools to go build Daydream
			support into your apps. Have fun with it &amp;mdash; if you do, your
			users will have fun too. Oh, and when you upload your shiny new APK
			to Google Play, be sure to add a note to your app’s description so
			that users searching for Daydreams can discover it.&lt;/p&gt;

			&lt;h3&gt;Further reading and samples&lt;/h3&gt;
			&lt;ul&gt;
			&lt;li&gt;API docs for &lt;a
			href="http://developer.android.com/reference/android/service/dreams/DreamService.html"&gt;DreamService&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;Sample code: &lt;a
			href="http://code.google.com/p/android-daydream-samples/source/browse/#git%2Fbouncer"&gt;BouncerDaydream&lt;/a&gt;,
			complete project for the code snippets in this post&lt;/li&gt;
			&lt;li&gt;Sample code: &lt;a
			href="https://android.googlesource.com/platform/packages/screensavers/WebView/+/master/"&gt;WebView&lt;/a&gt;,
			a Daydream that shows an HTML page&lt;/li&gt;
			&lt;li&gt;Sample code: &lt;a
			href="https://android.googlesource.com/platform/packages/screensavers/Basic/+/jb-mr1-release/src/com/android/dreams/basic/"&gt;Colors&lt;/a&gt;,
			a Daydream that demonstrates OpenGL ES 2.0 and TextureView&lt;/li&gt;
			&lt;/ul&gt;
			&lt;div style="display: inline-block; float: right; line-height:
			0;margin-top:1em;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/CzsVRpKauL4"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/108967384991768947849/posts/CzsVRpKauL4"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/CzsVRpKauL4"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=nOC8TTlMTiY:ICKqKbwLPCs:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=nOC8TTlMTiY:ICKqKbwLPCs:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=nOC8TTlMTiY:ICKqKbwLPCs:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/nOC8TTlMTiY"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/8397590263310614380?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/8397590263310614380?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/nOC8TTlMTiY/daydream-interactive-screen-savers.html"
			title="Daydream: Interactive Screen Savers" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://3.bp.blogspot.com/-8s5LkLutYBU/UNSwENBoD9I/AAAAAAAAB38/AAWIZcW9PBI/s72-c/daydreams_dsandler_headshot.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/12/daydream-interactive-screen-savers.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;D0QARH88eip7ImA9WhNVEE4.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-4945859137776867585
		</id>
		<published>2012-12-20T12:18:00.001-08:00</published>
		<updated>2012-12-20T12:29:05.172-08:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-12-20T12:29:05.172-08:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Google Play" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Promo Graphics" />
		<title>Localize Your Promotional Graphics on Google Play</title>
		<content type="html">&lt;p&gt;&lt;em&gt;Posted by Ellie Powers,
			Product Manager on the Google Play team&lt;/em&gt;&lt;/p&gt;

			&lt;p&gt;Google Play is your way to reach millions and millions of
			Android users around the world. In fact, since the start of 2011, the
			number of countries where you can sell apps has increased from 30 to
			over 130 &amp;mdash; including most recently, the launch of paid app
			support in Israel, Mexico, the Czech Republic, Poland, Brazil and
			Russia, and fully two-thirds of revenue for apps on Google Play comes
			from outside of the United States.&lt;/p&gt;

			&lt;p&gt;To help you capitalize on this growing international audience, it’s now
			even easier to market your apps to users around the world, by adding
			images and a video URL to your Google Play store listing for each of
			Google Play’s 49 languages, just as you’ve been able to add localized
			text. &lt;/p&gt;

			&lt;div class="separator" style="clear: both;float:right;width=400px;
			text-align: center;"&gt;
			&lt;img width="500"
			src="http://4.bp.blogspot.com/-roExB51_0sM/UNNxufNZ5MI/AAAAAAAAB3o/Ob8IUKD-L4k/s1600/local_graphics.png"
			style="border:4px solid #ddd;margin-left:1em;" /&gt;&lt;/div&gt;

			&lt;p&gt;A localized feature graphic can show translated text or add
			local flavor to your app &amp;mdash; for example, changing its theme
			to reflect local holidays. Always make sure that your &lt;a
			href="http://android-developers.blogspot.co.uk/2011/10/android-market-featured-image.html"&gt;feature
			graphic works at different sizes&lt;/a&gt;.&lt;/p&gt;

			&lt;p&gt;Once you’ve localized your app, you’ll want to make sure users in all
			languages can understand what your app does and how it can benefit
			them. Review the &lt;a
			href="http://support.google.com/googleplay/android-developer/bin/answer.py?hl=en&amp;answer=1078870"&gt;graphics
			guidelines&lt;/a&gt; and get started with localized graphics.
			&lt;/p&gt;

			&lt;p&gt;Localized screenshots make it clear to the user that they’ll be able to use
			your app in their language. As you’re adding localized screenshots,
			remember that a lot of people will be getting new tablets for the
			holidays, and loading up with new apps, so you’ll want to include
			localized tablet screenshots to show off your tablet
			layouts.&lt;/p&gt;

			&lt;p&gt;With localized videos, you can now include a language-appropriate
			voiceover and text, and of course show the app running in the user’s
			language.&lt;/p&gt;

			&lt;p&gt;Ready to add localized images and videos to your store listing? To add
			localized graphics and video to your apps, you need to use the &lt;a
			href="https://play.google.com/apps/publish/v2/"&gt;Google Play
			Developer Console preview&lt;/a&gt; &amp;mdash; once you add
			localized graphics, you won’t be able to edit the app using the old
			version anymore. Those of you who use APK Expansion Files will now
			want to try the new Developer Console because it now includes this
			feature. We’ll be adding support for Multiple APK very soon. Once
			you’ve saved your application in the new Developer Console, automated
			translations become available to users on the web and devices
			&amp;mdash; with no work from you. &lt;/p&gt;

			&lt;p&gt;What are you doing to help your app reach a global audience? &lt;/p&gt;
			&lt;div style="display: inline-block; float: right; line-height:
			0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/+AndroidDevelopers/posts/axjy2kjY7Gi"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;br /&gt;
			&lt;a href="https://plus.google.com/+AndroidDevelopers/posts/axjy2kjY7Gi"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/+AndroidDevelopers/posts/axjy2kjY7Gi"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=JA2vuffxCD4:nJZukBr3Vug:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=JA2vuffxCD4:nJZukBr3Vug:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=JA2vuffxCD4:nJZukBr3Vug:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/JA2vuffxCD4"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/4945859137776867585?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/4945859137776867585?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/JA2vuffxCD4/localize-your-promotional-graphics-on.html"
			title="Localize Your Promotional Graphics on Google Play" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://4.bp.blogspot.com/-roExB51_0sM/UNNxufNZ5MI/AAAAAAAAB3o/Ob8IUKD-L4k/s72-c/local_graphics.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/12/localize-your-promotional-graphics-on.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;DUcEQHk_fCp7ImA9WhNWEkk.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-7228650198685551630
		</id>
		<published>2012-12-11T09:30:00.000-08:00</published>
		<updated>2012-12-11T09:30:01.744-08:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-12-11T09:30:01.744-08:00
		</app:edited>
		<title>The 2012 Android Developer Survey</title>
		<content type="html">&lt;div dir="ltr" style="text-align: left;"
			trbidi="on"&gt;
			The Android Developer Relations team is passionate about making Android
			app development a great experience, so we're asking all of you
			involved in building Android apps -- from engineers, to product
			managers, and distribution and support folks -- to let us know what
			you think.&lt;br /&gt;
			&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align: center;"&gt;
			&lt;a
			href="http://4.bp.blogspot.com/-5Lm0zF7cRAI/UMZYmaX2wRI/AAAAAAAABN0/SEYN0pXT8bk/s1600/IMG_20121130_124658%2B%25281%2529.jpg"
			imageanchor="1" style="margin-left: 1em; margin-right:
			1em;"&gt;&lt;img border="0" height="295"
			src="http://4.bp.blogspot.com/-5Lm0zF7cRAI/UMZYmaX2wRI/AAAAAAAABN0/SEYN0pXT8bk/s400/IMG_20121130_124658%2B%25281%2529.jpg"
			width="400" /&gt;&lt;/a&gt;&lt;/div&gt;
			&lt;br /&gt;
			We want to better understand the challenges you face when planning,
			designing, writing, and distributing your Android apps, so we've put
			together a brief (10-15min) survey that will help us test our
			assumptions and allow us to create better tools and resources for
			you.&lt;br /&gt;
			&lt;br /&gt;
			&lt;div style="text-align: left;"&gt;
			We've had a great response from thousands of Android developers
			who&amp;nbsp;have already responded - thank you! If you haven't yet
			filled in the survey, you can find it here:&amp;nbsp;&lt;a
			href="http://bit.ly/AndroidDevSurvey" style="font-weight:
			bold;"&gt;2012 Android Developer Survey&lt;/a&gt;.&lt;/div&gt;
			&lt;br /&gt;
			We'll be closing this year's survey &lt;b&gt;this Sunday (December 17th)
			at 12pm Pacific Time&lt;/b&gt;, so be sure to get your responses in
			before then.&lt;br /&gt;
			&lt;br /&gt;
			To keep the survey short and simple, there are no sections for general
			comments. That's because we&amp;nbsp;want to hear your thoughts,
			questions, suggestions, and complaints &lt;i&gt;all year.&lt;/i&gt;
			If there's anything you'd like to share with us, you can let us know
			by posting to us&amp;nbsp;(publicly or privately)&amp;nbsp;on Google+
			at &lt;a href="http://www.google.com/+AndroidDevelopers"&gt;+Android
			Developers&lt;/a&gt; or using the hash tag #AndroidDev.&lt;br /&gt;
			&lt;br /&gt;
			We can't always respond, but we're paying close attention to everything
			you have to say.&lt;br /&gt;
			&lt;br /&gt;
			As always, we're looking forward to hearing your thoughts!&lt;/div&gt;
			&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=0HTn8eFTB-g:c8VAb4HRGLo:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=0HTn8eFTB-g:c8VAb4HRGLo:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=0HTn8eFTB-g:c8VAb4HRGLo:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/0HTn8eFTB-g"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/7228650198685551630?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/7228650198685551630?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/0HTn8eFTB-g/the-2012-android-developer-survey.html"
			title="The 2012 Android Developer Survey" />
		<author>
			<name>Android Developer Relations</name>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://4.bp.blogspot.com/-5Lm0zF7cRAI/UMZYmaX2wRI/AAAAAAAABN0/SEYN0pXT8bk/s72-c/IMG_20121130_124658%2B%25281%2529.jpg"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/12/the-2012-android-developer-survey.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;D0YHQ3wyeSp7ImA9WhNWEUs.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-1332623547826553990
		</id>
		<published>2012-12-10T10:35:00.000-08:00</published>
		<updated>2012-12-10T10:45:32.291-08:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-12-10T10:45:32.291-08:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Google Services" />
		<category scheme="http://www.blogger.com/atom/ns#" term="In-app Billing" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Google Play" />
		<title>In-App Billing Version 3</title>
		<content type="html">&lt;em&gt;Posted by Posted by Bruno Oliveira of
			the Android Developer Relations Team&lt;/em&gt;&lt;br /&gt;
			&lt;br /&gt;
			In-app Billing has come a long way since it was &lt;a
			href="http://android-developers.blogspot.com/2011/03/in-app-billing-launched-on-android.html"&gt;first
			announced on Google Play&lt;/a&gt; (then Android Market). One year
			and a half later, the vast majority of top-grossing apps on Google
			Play use In-app Billing and thousands of developers monetize apps
			through try-and-buy, virtual goods, as well as subscriptions.&lt;br
			/&gt;
			&lt;br /&gt;
			In-app Billing is expanding again today, making it even more powerful and
			flexible so you can continue to build successful applications.
			Version 3 introduces the following new features:&lt;br /&gt;
			&lt;ul&gt;&lt;li&gt;An improved design that makes applications
			simpler to write, debug and maintain. Integrations that previously
			required several hundred lines of code can now be implemented in as
			few as 50.&lt;/li&gt;
			&lt;li&gt;More robust architecture resulting in fewer lost transactions.&lt;/li&gt;
			&lt;li&gt;Local caching for faster API calls.&lt;/li&gt;
			&lt;li style="padding-bottom:0;margin-bottom:0;"&gt;Long-anticipated
			functionality such as the ability to consume managed purchases and
			query for product information.&lt;/li&gt;
			&lt;/ul&gt;&lt;p style="margin-top:1em;"&gt;In-app Billing version 3 is available to
			any application that uses in-app items (support for subscriptions is
			coming shortly). It is supported by Android 2.2+ devices running the
			latest version of the Google Play store (over 90% of active
			devices).&lt;/p&gt;Instead of the four different application
			components required by the asynchronous structure of the previous
			release, the new version of the API allows developers to make
			synchronous requests and handle responses directly from within a
			single Activity, all of which are accomplished with just a few lines
			of code. The reduced implementation cost makes this a great
			opportunity for developers who are implementing new in-app billing
			solutions.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;Easier to Implement&lt;/h3&gt;&lt;br /&gt;
			In contrast to the earlier model of asynchronous notification through a
			background service, the new API is now synchronous and reports the
			result of a purchase immediately to the application. This eliminates
			the necessity to integrate the handling of asynchronous purchase
			results into the application's lifecycle, which significantly
			simplifies the code that a developer must write in order to sell an
			in-app item.&lt;br /&gt;
			&lt;br /&gt;
			To launch a purchase, simply obtain a buy Intent from the API and start
			it:&lt;br /&gt;
			&lt;br /&gt;
			&lt;pre&gt;Bundle bundle = mService.getBuyIntent(3, "com.example.myapp",
			MY_SKU, ITEM_TYPE_INAPP, developerPayload);

			PendingIntent pendingIntent = bundle.getParcelable(RESPONSE_BUY_INTENT);
			if (bundle.getInt(RESPONSE_CODE) == BILLING_RESPONSE_RESULT_OK) {
			// Start purchase flow (this brings up the Google Play UI).
			// Result will be delivered through onActivityResult().
			startIntentSenderForResult(pendingIntent, RC_BUY, new Intent(),
			Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(0));
			}&lt;/pre&gt;&lt;br /&gt;
			Then, handle the purchase result that's delivered to your Activity's
			onActivityResult() method:&lt;br /&gt;
			&lt;br /&gt;
			&lt;pre&gt;public void onActivityResult(int requestCode, int resultCode, Intent data)
			{
			if (requestCode == RC_BUY) {
			int responseCode = data.getIntExtra(RESPONSE_CODE);
			String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);
			String signature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);

			// handle purchase here (for a permanent item like a premium upgrade,
			// this means dispensing the benefits of the upgrade; for a
			consumable
			// item like "X gold coins", typically the application would initiate
			// consumption of the purchase here)
			}
			}&lt;/pre&gt;&lt;br /&gt;
			Also, differently from the previous version, all purchases are now managed
			by Google Play, which means the ownership of a given item can be
			queried at any time. To implement the same mechanics as unmanaged
			items, applications can consume the item immediately upon purchase
			and provision the benefits of the item upon successful
			consumption.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;Local Caching&lt;/h3&gt;&lt;br /&gt;
			The API leverages a new feature of the Google Play store application
			which caches In-app Billing information locally on the device, making
			it readily available to applications. With this feature, many API
			calls will be serviced through cache lookups instead of a network
			connection to Google Play, which significantly speeds up the API's
			response time. For example, an application could query the owned
			items using this call: &lt;br /&gt;
			&lt;br /&gt;
			&lt;pre&gt;Bundle bundle = mService.getPurchases(3, mContext.getPackageName(),
			ITEM_TYPE_INAPP);
			if (bundle.getInt(RESPONSE_CODE) == BILLING_RESPONSE_RESULT_OK) {
			ArrayList&lt;string&gt; mySkus, myPurchases, mySignatures;
			mySkus = bundle.getStringArrayList(RESPONSE_INAPP_ITEM_LIST);
			myPurchases = bundle.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST);
			mySignatures =
			bundle.getStringArrayList(RESPONSE_INAPP_PURCHASE_SIGNATURE_LIST);

			// handle items here
			}&lt;/pre&gt;&lt;br /&gt;
			Querying for owned items was an expensive server call in previous versions of
			the API, so developers were discouraged from doing so frequently.
			However, since the new version implements local caching, applications
			can now make this query every time they start running, and as often
			as necessary thereafter.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;Product Information&lt;/h3&gt;&lt;br /&gt;
			The API also introduces a long-anticipated feature: the ability to query
			in-app product information directly from Google Play. Developers can
			now programmatically obtain an item's title, description and price.
			No currency conversion or formatting is necessary: prices are
			reported in the user's currency and formatted according to their
			locale:&lt;br /&gt;
			&lt;br /&gt;
			&lt;pre&gt;Bundle bundle = mService.getSkuDetails(3, "com.example.myapp",
			ITEM_TYPE_INAPP, skus); // skus is a Bundle with the list of SKUs to
			query
			if (bundle.getInt(RESPONSE_CODE) == BILLING_RESPONSE_RESULT_OK) {
			List&lt;string&gt; detailsList =
			bundle.getStringArrayList(RESPONSE_SKU_DETAILS_LIST);
			for (String details : detailsList) {
			// details is a JSON string with
			// SKU details (title, description, price, ...)
			}
			}&lt;/pre&gt;&lt;br /&gt;
			This means that, for example, developers can update prices in Developer
			Console and then use this API call to show the updated prices in the
			application (such as for a special promotion or sale) with no need to
			update the application's code to change the prices displayed to the
			user.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;Sample Application&lt;/h3&gt;&lt;br /&gt;
			In addition to the API, we are releasing a new sample application that
			illustrates how to implement In-app Billing. It also contains helper
			classes that implement commonly-written boilerplate code such as
			marshalling and unmarshalling data structures from JSON strings and
			Bundles, signature verification, as well as utilities that
			automatically manage background work in order to allow developers to
			call the API directly from the UI thread of their application. We
			highly recommend that developers who are new to In-app Billing
			leverage the code in this sample, as it further simplifies the
			process of implemention. The sample application is available for
			download through the Android SDK Manager.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;App-Specific Keys&lt;/h3&gt;&lt;br /&gt;
			Along with the other changes introduced with In-app Billing Version 3, we
			have also improved the way Licensing and In-app Billing keys are
			managed. Keys are now set on a per-app basis, instead of a
			per-developer basis and are available on the “Services &amp; APIs”
			page for each application on &lt;a
			href="https://play.google.com/apps/publish/v2/"&gt;Google Play
			Developer Console preview&lt;/a&gt;. Your existing applications will
			continue to work with their current keys.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;Get Started!&lt;/h3&gt;&lt;br /&gt;
			To implement In-app Billing in your application using the new API,
			start with the updated &lt;a
			href="http://developer.android.com/google/play/billing/billing_overview.html"&gt;In-App
			Billing documentation&lt;/a&gt; and take the &lt;a
			href="http://developer.android.com/training/in-app-billing/index.html"&gt;Selling
			In-App Products&lt;/a&gt; training class. To use In-App Billing
			Version 3, you’ll need to use the new Google Play Developer Console
			preview. &lt;br /&gt;
			&lt;div style="display: inline-block; float: right; line-height:
			0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/+AndroidDevelopers/posts/R8DKwZDsz5m"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;br /&gt;
			&lt;a href="https://plus.google.com/+AndroidDevelopers/posts/R8DKwZDsz5m"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/+AndroidDevelopers/posts/R8DKwZDsz5m"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=-8vrfw41pOk:1AZ87jFTBlw:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=-8vrfw41pOk:1AZ87jFTBlw:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=-8vrfw41pOk:1AZ87jFTBlw:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/-8vrfw41pOk"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/1332623547826553990?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/1332623547826553990?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/-8vrfw41pOk/in-app-billing-version-3.html"
			title="In-App Billing Version 3" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<feedburner:origLink>http://android-developers.blogspot.com/2012/12/in-app-billing-version-3.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;DUIMQXk6cSp7ImA9WhNXFkU.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-4887923279727603692
		</id>
		<published>2012-12-03T10:41:00.000-08:00</published>
		<updated>2012-12-04T22:06:20.719-08:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-12-04T22:06:20.719-08:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Google Play services" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Maps" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Photo Sphere" />
		<title>New Google Maps Android API now part of Google Play services
		</title>
		<content type="html">&lt;em&gt;Posted by Reto Meier, Evan Rapoport,
			and Andrew Foster&lt;/em&gt;&lt;br /&gt;
			&lt;br /&gt;
			Google Play services is our new platform that offers you better integration
			with Google products, and which provides greater agility for quickly
			rolling out new capabilities for you to use within your apps. Today
			we’re launching &lt;a
			href="http://developer.android.com/google/play-services/index.html"&gt;&lt;strong&gt;Google
			Play services v2.0&lt;/strong&gt;&lt;/a&gt;, which includes two new
			APIs, including perhaps our most frequently requested upgrade:
			&lt;strong&gt;Maps&lt;/strong&gt;.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;Google Maps Android API&lt;/h3&gt;&lt;br /&gt;
			The new version of the &lt;a
			href="http://developers.google.com/maps/documentation/android/"&gt;API&lt;/a&gt;
			allows developers to bring many of the recent features of Google Maps
			for Android to your Android apps. We’re excited to make this API
			available as part of Google Play services supporting devices from
			Froyo onwards (API level 8+).&lt;br /&gt;
			&lt;br /&gt;
			The new API uses &lt;strong&gt;vector-based maps&lt;/strong&gt; that
			support &lt;strong&gt;2D and 3D views&lt;/strong&gt;, and allow users
			to &lt;strong&gt;tilt and rotate&lt;/strong&gt; the map with simple
			gestures. Along with the layers you’ve come to know from Google Maps
			such as satellite, hybrid, terrain and traffic, the new API lets you
			include &lt;a
			href="http://support.google.com/gmm/bin/answer.py?hl=en&amp;answer=1685872&amp;topic=1685871&amp;ctx=topic"&gt;indoor
			maps&lt;/a&gt; for many major airports and shopping centers in your
			app.&lt;br /&gt;
			&lt;br /&gt;
			One of most common feature requests we’ve heard on Android is support
			for &lt;strong&gt;Map Fragments&lt;/strong&gt;. With this new API,
			adding a map to your Activity is as simple as:&lt;br /&gt;
			&lt;br /&gt;
			&lt;pre&gt;&amp;lt;fragment
			android:id="@+id/map"
			android:layout_width="match_parent"
			android:layout_height="match_parent"
			class="com.google.android.gms.maps.MapFragment" /&amp;gt;&lt;/pre&gt;&lt;br /&gt;
			Check out this image from updated &lt;a
			href="https://play.google.com/store/apps/details?id=com.trulia.android"&gt;Trulia&lt;/a&gt;
			Android app (which goes live tomorrow), that users can use to search
			for a place to buy or rent in 3D.&lt;br /&gt;
			&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align:
			center;"&gt;&lt;img border="0" width="600"
			src="http://2.bp.blogspot.com/-lcqRsXc3IMI/ULzi7kKxhXI/AAAAAAAAB0I/2XqzmJ69yWI/s1600/Trulia%2BScreenshot.png"
			/&gt;&lt;/div&gt;&lt;br /&gt;
			The new API is simpler to use, so that creating markers and info windows
			is easy. Polylines, Polygons, Ground Overlays and Tile Overlays can
			all now be added to the map with just a few lines of code.&lt;br
			/&gt;
			&lt;br /&gt;
			To get started follow the getting started instructions to obtain an API
			Key. Then &lt;strong&gt;download and configure the Google Play
			services SDK&lt;/strong&gt; using the SDK Manager. Check the Google
			Maps for Android API documentation for more details. If you haven't
			got it already, you'll need to &lt;a
			href="http://developer.android.com/sdk/index.html"&gt;download the
			Android SDK&lt;/a&gt; first.&lt;br /&gt;
			&lt;br /&gt;
			More than 800,000 sites around the world already use our mapping APIs to
			create amazing and useful apps. We hope you enjoy using this new
			addition to the Google Maps API family, and building mapping
			experiences that were never before possible on a mobile device.
			&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;Photo Sphere&lt;/h3&gt;&lt;br /&gt;
			In Android 4.2, we introduced &lt;strong&gt;Photo Sphere&lt;/strong&gt;
			mode in the Camera, which you can use to create amazing, immersive
			panoramas just like you see in Street View on Google Maps. Today
			we’re excited to announce &lt;strong&gt;new APIs and
			documentation&lt;/strong&gt; that empower developers, businesses, and
			photographers to explore new uses of Photo Sphere for work and for
			play.&lt;br /&gt;
			&lt;br /&gt;
			We’ve made Photo Sphere an &lt;strong&gt;open format&lt;/strong&gt; so
			anyone can create and view them on the web or on mobile devices.
			&lt;br /&gt;
			&lt;br /&gt;
			A Photo sphere is simply an image file (like a JPG) that has in it
			text-based metadata, an open format created by Adobe called XMP. The
			metadata describes the Photo Sphere’s dimensions and how it should be
			rendered within the interactive Photo Sphere viewer you see in
			Android, Google+, and Google Maps.&lt;br /&gt;
			&lt;br /&gt;
			If you’d like to programmatically or manually add the XMP metadata into
			panoramic images not created by the Photo Sphere camera in Android,
			stay tuned today for more details on the metadata and how to apply it
			to your photos programmatically later.&lt;br /&gt;
			&lt;br /&gt;
			In the new Google Play services, we’ve added &lt;a
			href="http://developer.android.com/reference/com/google/android/gms/panorama/package-summary.html"&gt;APIs&lt;/a&gt;
			to give you the ability to check whether an image is a Photo Sphere
			and then open it up in the Photo Sphere viewer.&lt;br /&gt;
			&lt;br /&gt;
			&lt;pre&gt;// This listener will be called with information about the given
			panorama.
			OnPanoramaInfoLoadedListener infoLoadedListener =
			new OnPanoramaInfoLoadedListener() {
			@Override
			public void onPanoramaInfoLoaded(ConnectionResult result,
			Intent viewerIntent) {
			if (result.isSuccess()) {
			// If the intent is not null, the image can be shown as a
			// panorama.
			if (viewerIntent != null) {
			// Use the given intent to start the panorama viewer.
			startActivity(viewerIntent);
			}
			}

			// If viewerIntent is null, the image is not a viewable panorama.
			}
			};

			// Create client instance and connect to it.
			PanoramaClient client = ...
			...

			// Once connected to the client, initiate the asynchronous check on
			whether
			// the image is a viewable panorama.
			client.loadPanoramaInfo(infoLoadedListener,
			panoramaUri);&lt;/pre&gt;&lt;p style="margin-top:1.5em;"&gt;To learn
			more about Google Play services and the APIs available to you through
			it, visit the new &lt;a
			href="http://developer.android.com/google/index.html"&gt;Google
			Services&lt;/a&gt; area of the Android Developers
			site.&lt;/p&gt;&lt;div style="display: inline-block; float: right;
			line-height: 0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/Tyz491d96Ci"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/108967384991768947849/posts/Tyz491d96Ci"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/Tyz491d96Ci"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=snW-A4hcc2Q:KXiCS1jsKj8:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=snW-A4hcc2Q:KXiCS1jsKj8:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=snW-A4hcc2Q:KXiCS1jsKj8:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/snW-A4hcc2Q"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/4887923279727603692?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/4887923279727603692?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/snW-A4hcc2Q/new-google-maps-android-api-now-part-of.html"
			title="New Google Maps Android API now part of Google Play services" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://2.bp.blogspot.com/-lcqRsXc3IMI/ULzi7kKxhXI/AAAAAAAAB0I/2XqzmJ69yWI/s72-c/Trulia%2BScreenshot.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/12/new-google-maps-android-api-now-part-of.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;CUUHRX8yfip7ImA9WhNQGUg.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-3686472350392145012
		</id>
		<published>2012-11-26T10:03:00.000-08:00</published>
		<updated>2012-11-26T10:07:14.196-08:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-11-26T10:07:14.196-08:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Android Design" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Tablets" />
		<title>Designing for Tablets? We’re Here to Help!</title>
		<content type="html">&lt;p&gt;&lt;em&gt;Posted by &lt;a
			href="https://plus.google.com/u/0/113735310430199015092"&gt;Roman
			Nurik&lt;/a&gt;, who often writes about Android design-related topics
			on Google+&lt;/em&gt;&lt;/p&gt;&lt;p&gt;So you’ve got a great Android
			phone app on Google Play, your users love it, and you’re kicking back
			and watching the download numbers soar. Congrats! But like any
			enterprising developer, you may be thinking, “how do I take my app’s
			success even further?” The answer: an equally awesome experience on
			tablets. Users love their tablet apps! &lt;a
			href="http://developer.android.com/distribute/googleplay/spotlight/tablets.html"&gt;For
			example&lt;/a&gt;, Mint.com found that the larger screen real estate
			allowed tablet users to engage with their budget data 7x more than on
			phones. And TinyCo found that on average, paying users spent 35% more
			on tablets than on handsets. So now is the right time to think about
			how your app translates onto these larger screen devices that are
			designed to meet users’ more generic, everyday computing
			needs.&lt;/p&gt;&lt;p&gt;In this post, we’ll recap some of the
			resources available for crafting a great tablet experience for your
			users. These resources are useful for everyone in the app development
			pipeline&amp;mdash;from product managers, to designers, to
			developers, and QA engineers.&lt;/p&gt;&lt;h3&gt;Android Design
			Guidelines&lt;/h3&gt;&lt;p&gt;No conversation about Android app
			design or development should go very far without first consulting the
			&lt;a
			href="http://developer.android.com/design/index.html"&gt;Android
			Design&lt;/a&gt; guidelines. While most of the sections are relevant
			to all Android devices, certain sections stand out as particularly
			relevant to design on tablets.&lt;/p&gt;&lt;p style="float: right;
			margin-left: 20px"&gt;&lt;img
			src="http://developer.android.com/design/media/devices_displays_main.png"
			height="200"&gt;&lt;/p&gt;&lt;p&gt;The &lt;a
			href="http://developer.android.com/design/style/devices-displays.html"&gt;Devices
			and Displays&lt;/a&gt; page introduces the concept of
			density-independence. For example, although the Nexus 4, Nexus 7, and
			Motorola XOOM all have a similar pixel resolution (1280x768,
			1280x800, and 1280x800 respectively), they have vastly different
			screens. Instead of thinking in pixels, think in dips
			(density-independent pixels)&amp;mdash;that way, it’s much easier to
			conceptualize the difference between Nexus 4 (640x384 dp), Nexus 7
			(960x600dp), and Nexus 10 or the Motorola XOOM (1280x800
			dp).&lt;/p&gt;&lt;p&gt;Following the 48dp rhythm discussed in &lt;a
			href="http://developer.android.com/design/style/metrics-grids.html"&gt;Metrics
			and Grids&lt;/a&gt; helps take some of the guesswork out of sizing
			elements, especially for tablets. When in doubt, use multiples of
			48dp (or 16dp for a finer grid) for sizing elements horizontally and
			vertically. For example, when showing sparse content on larger
			screens, consider using generous side margins of 96dp or 144dp. Or
			when deciding how wide your master pane should be in a master/detail
			layout for 10” tablets, see how your master content looks and feels
			with a width of 240dp or 288dp.&lt;/p&gt;&lt;p style="float: left;
			margin-right: 20px"&gt;&lt;img
			src="http://developer.android.com/design/media/multipane_expand.png"
			height="200"&gt;&lt;/p&gt;&lt;p&gt;The &lt;a
			href="http://developer.android.com/design/patterns/multi-pane-layouts.html"&gt;Multi-pane
			Layouts&lt;/a&gt; guide discusses use cases and examples for
			combining related views into a single screen to simultaneously
			improve app navigation and make optimal use of the available screen
			real estate. It also discusses strategies for laying out content
			across &lt;a
			href="http://developer.android.com/design/patterns/multi-pane-layouts.html#orientation"&gt;both
			portrait and landscape&lt;/a&gt;, all while maintaining functional
			parity across orientations. Since users enjoy using tablets in both
			portrait and landscape orientations, it’s even more important to
			react properly to orientation changes than with
			phones.&lt;/p&gt;&lt;p&gt;Lastly, the &lt;a
			href="http://developer.android.com/design/downloads/index.html#stencils"&gt;Downloadable
			Stencils&lt;/a&gt; offer designers a great starting point for
			high-fidelity mockups, complete with reference device outlines,
			correctly sized action bars, and more.&lt;/p&gt;&lt;h3
			style="clear:both"&gt;Android Training for
			Developers&lt;/h3&gt;&lt;p&gt;The &lt;a
			href="http://developer.android.com/training/index.html"&gt;Training&lt;/a&gt;
			section of the developer site offers task-oriented technical training
			material, complete with flow diagrams, code snippets, sample projects
			and more. Several of these ‘classes’ are geared toward helping
			developers understand how to scale your apps across any screen
			size.&lt;/p&gt;&lt;p style="float: right; margin-left:
			20px"&gt;&lt;img
			src="http://developer.android.com/images/training/app-navigation-wireframing-map-example-tablet.png"
			height="200"&gt;&lt;/p&gt;&lt;p&gt;The Designing Effective Navigation
			class&amp;mdash;aimed more at the initial design phase of the app
			creation process&amp;mdash;offers a methodology for effectively
			planning and &lt;a
			href="http://developer.android.com/training/design-navigation/multiple-sizes.html"&gt;grouping
			screens on tablets&lt;/a&gt;, and even shows &lt;a
			href="http://developer.android.com/training/design-navigation/wireframing.html"&gt;example
			wireframes&lt;/a&gt; for a simple news reader application following
			this methodology.&lt;/p&gt;&lt;p&gt;The classes &lt;a
			href="http://developer.android.com/training/basics/fragments/index.html"&gt;Building
			a Dynamic UI with Fragments&lt;/a&gt; and &lt;a
			href="http://developer.android.com/training/multiscreen/index.html"&gt;Designing
			for Multiple Screens&lt;/a&gt; demonstrate how to use &lt;a
			href="http://developer.android.com/guide/components/fragments.html"&gt;fragments&lt;/a&gt;
			in conjunction with Android’s resources framework. They show how to
			easily &lt;a
			href="http://developer.android.com/training/multiscreen/screensizes.html"&gt;choose
			between tablet and handset layouts at runtime&lt;/a&gt; while
			maximizing code reuse and minimizing your application size using
			&lt;a
			href="http://developer.android.com/training/multiscreen/screensizes.html#TaskUseAliasFilters"&gt;resource
			aliases&lt;/a&gt;. They also demonstrate techniques for &lt;a
			href="http://developer.android.com/training/multiscreen/adaptui.html"&gt;adapting
			UI flows based on the current layout&lt;/a&gt;.&lt;/p&gt;&lt;p
			style="float: left; margin-right: 20px"&gt;&lt;img
			src="http://developer.android.com/images/fundamentals/fragments.png"
			height="200"&gt;&lt;/p&gt;&lt;p&gt;Lastly, while not precisely a
			training class, the &lt;a
			href="http://developer.android.com/guide/practices/tablets-and-handsets.html"&gt;Supporting
			Tablets and Handsets&lt;/a&gt; document offers even more information
			about some of these key best practices. And if you’re the type of
			developer that would prefer to skip the text and jump right into the
			code, you can even &lt;a
			href="http://android-developers.blogspot.com/2012/06/android-sdk-tools-revision-20.html"&gt;add
			a Master/Detail flow&lt;/a&gt;, complete with handset and tablet
			support, to your app with just a few clicks using the Android
			Developer Tools for Eclipse.&lt;/p&gt;&lt;h3
			style="clear:both"&gt;Android Design in Action
			Highlights&lt;/h3&gt;&lt;p&gt;Each week, a few of us on the developer
			relations team get together on the &lt;a
			href="http://www.youtube.com/playlist?list=PLWz5rJ2EKKc8j2B95zGMb8muZvrIy-wcF"&gt;Android
			Design in Action&lt;/a&gt; live show to discuss Android design best
			practices, as well as provide original ‘redesign’ mockups to help
			demonstrate our vision of how Android apps should look and
			feel.&lt;/p&gt;&lt;p&gt;A recent episode focused on the topic of
			&lt;a
			href="http://www.youtube.com/watch?v=zHirwKGEfoE&amp;amp;list=PLWz5rJ2EKKc8j2B95zGMb8muZvrIy-wcF"&gt;responsive
			design&lt;/a&gt;, or designing flexible apps that can adapt to
			whatever screen size or form factor they’re run on:&lt;/p&gt;&lt;p
			style="text-align: center"&gt;&lt;object width="640" height="360"
			class="BLOGGER-youtube-video"
			classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
			codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"
			data-thumbnail-src="http://1.gvt0.com/vi/zHirwKGEfoE/0.jpg"&gt;&lt;param
			name="movie"
			value="http://www.youtube.com/v/zHirwKGEfoE&amp;fs=1&amp;source=uds"
			/&gt;&lt;param name="bgcolor" value="#FFFFFF" /&gt;&lt;param
			name="allowFullScreen" value="true" /&gt;&lt;embed width="640"
			height="360"
			src="http://www.youtube.com/v/zHirwKGEfoE&amp;fs=1&amp;source=uds"
			type="application/x-shockwave-flash"
			allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;&lt;p&gt;In
			the episode, we celebrated successful examples of responsive design
			on Android, ranging from creating calendar events in &lt;a
			href="https://play.google.com/store/apps/details?id=com.google.android.calendar"&gt;Google
			Calendar&lt;/a&gt;, to browsing wallpapers and stories in &lt;a
			href="https://play.google.com/store/apps/details?id=org.lucasr.pattrn"&gt;Pattrn&lt;/a&gt;
			and &lt;a
			href="https://play.google.com/store/apps/details?id=com.ideashower.readitlater.pro"&gt;Pocket&lt;/a&gt;,
			to playing video in &lt;a
			href="https://play.google.com/store/apps/details?id=com.ted.android"&gt;TED&lt;/a&gt;,
			and finally to managing your conference schedule in the &lt;a
			href="http://code.google.com/p/iosched"&gt;open-source&lt;/a&gt;
			&lt;a
			href="https://play.google.com/store/apps/details?id=com.google.android.apps.iosched"&gt;Google
			I/O 2012 app&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We also regularly feature
			tablet design concepts on the show (some are shown below), so we
			highly recommend tuning in each week for design
			ideas.&lt;/p&gt;&lt;div style="float:left; margin-right:
			20px"&gt;&lt;a
			href="http://4.bp.blogspot.com/-v4nphvZvOfM/ULOgdfLau6I/AAAAAAAADBY/DersL6LNuog/s1600/t1.png"
			imageanchor="1"&gt;&lt;img border="0" height="150"
			src="http://4.bp.blogspot.com/-v4nphvZvOfM/ULOgdfLau6I/AAAAAAAADBY/DersL6LNuog/s200/t1.png"
			width="200" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:left;
			margin-right: 20px"&gt;&lt;a
			href="http://3.bp.blogspot.com/-Vb4yc1YRRzc/ULOgeWT_K_I/AAAAAAAADBg/MNk2GsGuYU8/s1600/t2.png"
			imageanchor="1"&gt;&lt;img border="0" height="150"
			src="http://3.bp.blogspot.com/-Vb4yc1YRRzc/ULOgeWT_K_I/AAAAAAAADBg/MNk2GsGuYU8/s200/t2.png"
			width="200" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:left;
			margin-right: 20px"&gt;&lt;a
			href="http://1.bp.blogspot.com/-JFKsg50HojM/ULOgfEE84vI/AAAAAAAADBo/oPbYN7nSQX8/s1600/t3.png"
			imageanchor="1"&gt;&lt;img border="0" height="150"
			src="http://1.bp.blogspot.com/-JFKsg50HojM/ULOgfEE84vI/AAAAAAAADBo/oPbYN7nSQX8/s200/t3.png"
			width="200" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:left;
			margin-right: 20px"&gt;&lt;a
			href="http://4.bp.blogspot.com/-V1CD-7wdr9U/ULOggBdb7sI/AAAAAAAADBw/JOzk4BUDeuE/s1600/t4.png"
			imageanchor="1"&gt;&lt;img border="0" height="150"
			src="http://4.bp.blogspot.com/-V1CD-7wdr9U/ULOggBdb7sI/AAAAAAAADBw/JOzk4BUDeuE/s200/t4.png"
			width="200" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:left;
			margin-right: 20px"&gt;&lt;a
			href="http://2.bp.blogspot.com/-gc0kFF_n9lM/ULOghkLETLI/AAAAAAAADB4/8bC3rASIgrk/s1600/t5.png"
			imageanchor="1"&gt;&lt;img border="0" height="150"
			src="http://2.bp.blogspot.com/-gc0kFF_n9lM/ULOghkLETLI/AAAAAAAADB4/8bC3rASIgrk/s200/t5.png"
			width="200" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p
			style="clear:both"&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;For even more
			tablet app inspiration, check out a few of these apps: &lt;a
			href="https://play.google.com/store/apps/details?id=com.expedia.bookings"&gt;Expedia
			Hotels &amp;amp; Flights&lt;/a&gt;, &lt;a
			href="https://play.google.com/store/apps/details?id=com.alphonso.pulse"&gt;Pulse
			News&lt;/a&gt;, &lt;a
			href="https://play.google.com/store/apps/details?id=com.battlelancer.seriesguide"&gt;SeriesGuide&lt;/a&gt;,
			&lt;a
			href="https://play.google.com/store/apps/details?id=ch.teamtasks.tasks"&gt;Tasks&lt;/a&gt;
			and &lt;a
			href="https://play.google.com/store/apps/details?id=com.opoloo.holotimer"&gt;Timer&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;The
			Tablet Quality Checklist&lt;/h3&gt;&lt;p&gt;Over in the “Distribute”
			section of developer.android.com, the recently published &lt;a
			href="http://developer.android.com/distribute/googleplay/quality/tablet.html"&gt;Tablet
			App Quality checklist&lt;/a&gt; is a great way to check if your app
			is tablet-ready along a variety of technical dimensions. You should
			make sure that everyone involved in your mobile products is aware of
			&amp;nbsp;the standards defined in this checklist, as it is one of
			the ways in which the Google Play team selects apps to feature in the
			&lt;a
			href="https://play.google.com/store/apps/collection/tablet_featured"&gt;Staff
			Picks for Tablets&lt;/a&gt; collection.&lt;/p&gt;&lt;p
			style="text-align: center"&gt;&lt;img
			src="http://developer.android.com/images/ui-ex-single-panes.png"
			height="100"&gt;&lt;img
			src="http://developer.android.com/images/ui-ex-multi-pane.png"
			height="100"&gt;&lt;/p&gt;&lt;h3&gt;So What are You Waiting
			For?&lt;/h3&gt;&lt;p&gt;2013 is almost here, and it’s looking to be
			another exciting year for Android tablets. Make sure your app is
			positioned to succeed in the evolving device landscape by following
			some of the best practices and examples discussed here and on the
			rest of &lt;a
			href="http://developer.android.com"&gt;developer.android.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If
			you have specific questions about your app, let us know on Google+
			(&lt;a href="https://plus.google.com/+AndroidDevelopers"&gt;+Android
			Developers&lt;/a&gt;) or Twitter (&lt;a
			href="https://twitter.com/AndroidDev"&gt;@AndroidDev&lt;/a&gt;)!&lt;/p&gt;&lt;div
			style="display: inline-block; float: right; line-height:
			0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/GbepKSGcwqV"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion on&lt;/span&gt;&lt;/a&gt;
			&lt;a
			href="https://plus.google.com/108967384991768947849/posts/GbepKSGcwqV"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/GbepKSGcwqV"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=Mlp5wCcti_0:ZQqnH4BoHik:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=Mlp5wCcti_0:ZQqnH4BoHik:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=Mlp5wCcti_0:ZQqnH4BoHik:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/Mlp5wCcti_0"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/3686472350392145012?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/3686472350392145012?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/Mlp5wCcti_0/designing-for-tablets-were-here-to-help.html"
			title="Designing for Tablets? We’re Here to Help!" />
		<author>
			<name>Roman Nurik</name>
			<uri>http://www.blogger.com/profile/00639910544933755151</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="32" height="32"
				src="http://4.bp.blogspot.com/-nF6-c9PZYCE/TcAztGqJQfI/AAAAAAAAAn8/FDSupO5K_tM/s220/avatar.png" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://4.bp.blogspot.com/-v4nphvZvOfM/ULOgdfLau6I/AAAAAAAADBY/DersL6LNuog/s72-c/t1.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/11/designing-for-tablets-were-here-to-help.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;Dk8DQX8zcSp7ImA9WhNRGU8.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-4208979633658384478
		</id>
		<published>2012-11-14T12:21:00.000-08:00</published>
		<updated>2012-11-14T12:27:50.189-08:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-11-14T12:27:50.189-08:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Tools" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Android SDK" />
		<title>Android SDK Tools, Revision 21</title>
		<content type="html">&lt;em&gt;Posted by &lt;a
			href="https://plus.google.com/109385828142935151413"&gt;Xavier
			Ducrohet&lt;/a&gt;, Android SDK Tech Lead, and &lt;a
			href="https://plus.google.com/u/0/100745390980338589225"&gt;Angana
			Ghosh&lt;/a&gt;, Product Manager in Android&lt;/em&gt;&lt;br /&gt;
			&lt;br /&gt;
			Along with the &lt;a
			href="http://android-developers.blogspot.com/2012/11/introducing-android-42-new-and-improved.html"&gt;Android
			4.2 SDK&lt;/a&gt;, we also launched a brand new update of the Android
			SDK Tools (Revision 21). The update includes new tools and
			capabilities that can help you work more efficiently as you create
			applications. Tools such as a new &lt;strong&gt;multi-config
			editor&lt;/strong&gt;, and &lt;strong&gt;new Lint
			rules&lt;/strong&gt; will help you develop apps more quickly, while a
			new &lt;strong&gt;UI test framework&lt;/strong&gt; will give you more
			ways automate testing and QA for your apps. For new developers,
			&lt;strong&gt;one-click SDK download&lt;/strong&gt; and new
			&lt;strong&gt;app templates&lt;/strong&gt; help you get started more
			quickly.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h4&gt;Multi-config editor&lt;/h4&gt;A new multi-configuration editor allows you to
			develop and prototype your UI across various orientations, screen
			sizes and locales. For example, while editing your layout in portrait
			mode, you can see if your edits aren't visible in the shorter
			landscape orientation. You can see previews for other screen sizes
			from small phones to large tablets, you can see previews for the
			layout using all the available language translations in your app, and
			so on. You can even see how the layout appears when it is included as
			a fragment in a different larger layout. Finally, Android allows you
			to create specialized layouts for any of these configurations, and
			the multi configuration editor shows you these overridden
			layouts.&lt;br /&gt;
			&lt;br /&gt;
			Here is a screenshot of the layout editor showing one of the layouts from
			the Google I/O application, across a variety of screen sizes.&lt;br
			/&gt;
			&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align:
			center;"&gt;&lt;img width="450"
			src="http://1.bp.blogspot.com/-5p14Rkfniu0/UKPcVMP3euI/AAAAAAAABzI/EIc3pOyh6ao/s1600/preview-screens%2B%25281%2529.png"
			style="border:2px solid #ccc;" /&gt;&lt;/div&gt;&lt;br /&gt;
			&lt;h4 style="margin-top:.5em;"&gt;More app templates&lt;/h4&gt;Tools R21
			brings three new app templates to help you to easily add new screens
			to your app. There’s a new full-screen activity for use as a photo or
			video viewer, a settings activity to handle basic user preferences
			and a login activity to capture username/password. &lt;br /&gt;
			&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align:
			center;"&gt;&lt;img border="0" height="196" width="450"
			src="http://1.bp.blogspot.com/-s7KqNXjMxC4/UKPeZO2DhTI/AAAAAAAABzg/JDmw7rXwaCc/s1600/image-3.png"
			dstyle="border:2px solid #ccc;" /&gt;&lt;/div&gt;&lt;br /&gt;
			&lt;h4 style="margin-top:.5em;"&gt;UI Automator Test
			Framework&lt;/h4&gt;One common approach to UI testing is to run tests
			manually and verify that the app is behaving as expected. UI
			Automator is a new software testing framework available in Tools R21
			that provides you with tools to easily automate UI testing tasks. It
			provides a GUI tool to scan and analyze the UI components of an
			Android application (uiautomatorviewer), a library containing APIs to
			create customized functional UI tests, and an execution engine to
			automate and run the tests against multiple physical devices. UI
			Automator runs on Android 4.1 (API level 16) or higher. To learn more
			head over to the &lt;a
			href="http://developer.android.com/tools/testing/testing_ui.html"&gt;UI
			Testing&lt;/a&gt; documentation.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h4&gt;One-click SDK installer&lt;/h4&gt;New Android SDK developers now have a
			convenient way to download all the various SDK components like Tools,
			Platform Tools, Eclipse ADT, and the latest system image with a
			single click. Existing developers can continue to manage their SDK
			components and get updates through the SDK Manager. &lt;br /&gt;
			&lt;br /&gt;
			&lt;h4&gt;Revamped AVD creation dialog&lt;/h4&gt;The new dialog makes it easier to
			create Android Virtual Devices (AVDs) matching real device profiles.
			The AVDs will also appear in the layout editor to show you how the
			layouts will look.&lt;br /&gt;
			&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align:
			center;"&gt;&lt;img border="0" width="450"
			src="http://3.bp.blogspot.com/-1KuuOXztP8I/UKPdZ8g200I/AAAAAAAABzU/m1pxFaONVk0/s1600/Screen%2Bshot%2B2012-11-05%2Bat%2B2.01.42%2BPM.png"
			style="border:2px solid #ccc;" /&gt;&lt;/div&gt;&lt;br /&gt;
			&lt;h4 style="margin-top:.5em;"&gt;More Lint rules&lt;/h4&gt;And to wrap
			things up there are 25 new lint rules which catch several common
			sources of bugs, for example deviations from Android design guide for
			icons, checks for mismanaged wakelocks, common sources of
			locale-related bugs and so on. So make sure you upgrade and let Lint
			loose on your projects before your next app update!&lt;br /&gt;
			&lt;br /&gt;
			A minor bug-fix to the Android NDK is also available. For a complete
			list of what’s new, see the release notes for &lt;a
			href="http://developer.android.com/tools/sdk/tools-notes.html"&gt;SDK
			Tools R21&lt;/a&gt;, &lt;a
			href="http://developer.android.com/tools/sdk/eclipse-adt.html"&gt;ADT
			21.0.0&lt;/a&gt; and &lt;a
			href="http://developer.android.com/tools/sdk/ndk/index.html"&gt;Android
			NDK R8c&lt;/a&gt;. &lt;br /&gt;
			&lt;br /&gt;
			&lt;div style="display: inline-block; float: right; line-height:
			0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/TEGYAVvwuD1"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/108967384991768947849/posts/TEGYAVvwuD1"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/TEGYAVvwuD1"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=DgyFeoIJUqM:QLUwSvFR8_w:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=DgyFeoIJUqM:QLUwSvFR8_w:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=DgyFeoIJUqM:QLUwSvFR8_w:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/DgyFeoIJUqM"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/4208979633658384478?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/4208979633658384478?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/DgyFeoIJUqM/android-sdk-tools-revision-21.html"
			title="Android SDK Tools, Revision 21" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://1.bp.blogspot.com/-5p14Rkfniu0/UKPcVMP3euI/AAAAAAAABzI/EIc3pOyh6ao/s72-c/preview-screens%2B%25281%2529.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/11/android-sdk-tools-revision-21.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;CEYERHs7cSp7ImA9WhNRGE4.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-4814340554555870405
		</id>
		<published>2012-11-13T10:04:00.000-08:00</published>
		<updated>2012-11-13T10:41:45.509-08:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-11-13T10:41:45.509-08:00
		</app:edited>
		<title>Introducing Android 4.2, A New and Improved Jelly Bean</title>
		<content type="html">&lt;em&gt;Posted by &lt;a
			href="https://plus.google.com/u/0/100745390980338589225"&gt;Angana
			Ghosh&lt;/a&gt;, Product Manager in Android, and &lt;a
			href="https://plus.google.com/116394770911517519851"&gt;Dirk
			Dougherty&lt;/a&gt;, Android Developer Relations
			Team&lt;/em&gt;&lt;br /&gt;
			&lt;br /&gt;
			Today we are making Android 4.2 (Jelly Bean) SDK platform available for
			download. Below are some of the highlights of Android 4.2, API level
			17.&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a
			href="http://developer.android.com/about/versions/jelly-bean.html"
			imageanchor="1" style="clear: right; float: right; margin-bottom:
			1em; margin-left: 1em;"&gt;&lt;img border="0" height="320"
			src="http://4.bp.blogspot.com/-P0b2RM0Yflo/T-sod7ZWSdI/AAAAAAAAA_s/Lh1QoJEWjkI/s320/jbean_srgb.png"
			width="270" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div
			style="margin-left:1em;"&gt;&lt;br /&gt;
			&lt;h4&gt;Performance&lt;/h4&gt;We've worked with our partners to run
			&lt;strong&gt;Renderscript computation directly in the
			GPU&lt;/strong&gt; on the Nexus 10, a first for any mobile
			computation platform.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h4&gt;New ways to engage users&lt;/h4&gt;Users can now place interactive
			&lt;strong&gt;lock screen widgets&lt;/strong&gt; directly on their
			device lock screens, for instant access to favorite apps and content.
			With just a &lt;a
			href="http://developer.android.com/guide/topics/appwidgets/index.html#lockscreen"&gt;small
			update&lt;/a&gt;, you can adapt any app widget to run on the lock
			screen. &lt;strong&gt;Daydream&lt;/strong&gt; is an interactive
			screensaver mode that users can encounter when their devices are
			charging or docked in a desk dock. You can create interactive
			daydreams that users display in this mode, and they can include any
			type of content. &lt;br /&gt;
			&lt;br /&gt;
			&lt;h4&gt;New interaction and entertainment experiences&lt;/h4&gt;Android 4.2
			introduces platform support for &lt;strong&gt;external
			displays&lt;/strong&gt; that goes beyond mirroring. Your apps can now
			target unique content to any number of displays attached to an
			Android device.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h4&gt;Enhancements for international users&lt;/h4&gt;To help you create better apps for
			users in languages such as Arabic, Hebrew, and Persian, Android 4.2
			includes &lt;strong&gt;native RTL support&lt;/strong&gt;, including
			layout mirroring. With native RTL support, you can deliver the same
			great app experience to all of your users with minimal extra work.
			Android 4.2 also includes a variety of &lt;strong&gt;font and
			character optimizations&lt;/strong&gt; for Korean, Japanese, Indic,
			Thai, Arabic and Hebrew writing systems.&lt;br /&gt;
			&lt;/div&gt;&lt;br /&gt;
			To get started developing and testing, download the Android 4.2
			Platform from the &lt;a
			href="http://developer.android.com/sdk/index.html"&gt;Android SDK
			Manager&lt;/a&gt;. For a complete overview of what's new, take a look
			at the &lt;a
			href="http://developer.android.com/about/versions/jelly-bean.html"&gt;Android
			4.2 platform highlights&lt;/a&gt; or read more of the details in the
			&lt;a
			href="http://developer.android.com/about/versions/android-4.2.html"&gt;API
			overview&lt;/a&gt;. &lt;br /&gt;
			&lt;br /&gt;
			&lt;div style="display: inline-block; float: right; line-height:
			0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/JzmTN3Y1UNF"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/108967384991768947849/posts/JzmTN3Y1UNF"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/JzmTN3Y1UNF"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=NDrqHlt610k:TGxywlo_YhI:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=NDrqHlt610k:TGxywlo_YhI:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=NDrqHlt610k:TGxywlo_YhI:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/NDrqHlt610k"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/4814340554555870405?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/4814340554555870405?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/NDrqHlt610k/introducing-android-42-new-and-improved.html"
			title="Introducing Android 4.2, A New and Improved Jelly Bean" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://4.bp.blogspot.com/-P0b2RM0Yflo/T-sod7ZWSdI/AAAAAAAAA_s/Lh1QoJEWjkI/s72-c/jbean_srgb.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/11/introducing-android-42-new-and-improved.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;DUYFR3c6cCp7ImA9WhNTFUU.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-1421454616125829675
		</id>
		<published>2012-10-18T11:58:00.000-07:00</published>
		<updated>2012-10-18T12:05:16.918-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-10-18T12:05:16.918-07:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Google Play" />
		<title>Google Play Seller Support in India</title>
		<content type="html">&lt;em&gt;Posted by Ibrahim Elbouchikhi, Product
			Manager on the Google Play team&lt;/em&gt;&lt;br /&gt;
			&lt;br /&gt;
			Over the past year, Android device activations in India have jumped more
			than 400%, bringing millions of new users to Google Play and driving
			huge increases in app downloads. In the last six months, Android
			users in India downloaded more apps than in the previous three years
			combined, and India has rocketed to become the fourth-largest market
			worldwide for app downloads. To help developers capitalize on this
			tremendous growth, we are launching Google Play seller support in
			India.&lt;br /&gt;
			&lt;br /&gt;
			&lt;span itemprop="description"&gt;Starting today, developers in India can
			sell paid applications, in-app products, and subscriptions in Google
			Play, with monthly payouts to their local bank accounts.&lt;/span&gt;
			They can take advantage of all of the tools offered by Google Play to
			monetize their products in the best way for their businesses, and
			they can target their products to the paid ecosystem of hundreds of
			millions of users in India and across the world.&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align:
			center;float:right;margin-bottom:2em;margin-top:1em;"&gt;&lt;img
			itemprop="image" border="0" hdeight="275"
			src="http://4.bp.blogspot.com/-ekT-9XQi0YY/UH7WT2XjSdI/AAAAAAAABwc/fI5QaPi7QEk/s320/india-apps1.png"
			width="400" /&gt;&lt;/div&gt;&lt;br /&gt;
			If you are an Android developer based in India, you can get started
			right away by &lt;a
			href="https://play.google.com/apps/publish/"&gt;signing in to your
			Developer Console&lt;/a&gt; and setting up a Google Checkout merchant
			account. If your apps are already published as free, you can monetize
			them by &lt;a
			href="http://developer.android.com/guide/google/play/billing/index.html"&gt;adding
			in-app products or subscriptions&lt;/a&gt;. For new apps, you can
			publish the apps as paid, in addition to selling in-app products or
			subscriptions. &lt;br /&gt;
			&lt;br /&gt;
			When you’ve prepared your apps and in-app products, you can price them in
			any available currencies, publish, and then receive payouts and
			financial data in your local currency. Visit the &lt;a
			href="http://support.google.com/googleplay/android-developer/?hl=en#topic=15867&amp;rd=1"&gt;developer
			help center&lt;/a&gt; for complete details.&lt;br /&gt;
			&lt;br /&gt;
			Along with seller support, we're also adding buyer’s currency support for
			India. We encourage developers everywhere to &lt;a
			href="http://play.google.com/apps/publish"&gt;visit your Developer
			Console&lt;/a&gt; as soon as possible to set prices for your products
			in Indian Rupees and other new currencies (such as Russian
			Rubles).&lt;br /&gt;
			&lt;br /&gt;
			Stay tuned for more announcements as we continue to roll out Google Play
			seller support to many more countries around the world.&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/eyFFYGGW2dm"
			style="color: #333333; text-decoration: none;"&gt;&lt;br /&gt;
			&lt;/a&gt;&lt;div style="display: inline-block; float: right;
			line-height: 0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/eyFFYGGW2dm"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 11px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/eyFFYGGW2dm"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/eyFFYGGW2dm"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=N3xVFX4orO0:vKU5nWcvt7Y:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=N3xVFX4orO0:vKU5nWcvt7Y:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=N3xVFX4orO0:vKU5nWcvt7Y:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/N3xVFX4orO0"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/1421454616125829675?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/1421454616125829675?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/N3xVFX4orO0/google-play-seller-support-in-india.html"
			title="Google Play Seller Support in India" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://4.bp.blogspot.com/-ekT-9XQi0YY/UH7WT2XjSdI/AAAAAAAABwc/fI5QaPi7QEk/s72-c/india-apps1.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/10/google-play-seller-support-in-india.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;CEYDR3k4cCp7ImA9WhNTE08.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-5305339073424599517
		</id>
		<published>2012-10-15T10:04:00.001-07:00</published>
		<updated>2012-10-15T10:29:36.738-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-10-15T10:29:36.738-07:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Developer Console" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Google Play" />
		<title>New Google Play Developer Console Available to Everyone</title>
		<content type="html">&lt;em&gt;Posted by Eva-Lotta Lamm, Riccardo
			Govoni, and Ellie Powers of the Google Play team&lt;/em&gt;&lt;br
			/&gt;
			&lt;br /&gt;
			We've been working on a new Google Play Developer Console, centered around
			how you make and publish apps, to create a foundation for the
			exciting features we have planned for the future. Earlier this year
			at Google I/O, we demoed the new version (&lt;a
			href="http://www.youtube.com/watch?v=TlVhNVFjeZo&amp;amp;feature=player_detailpage#t=1888s"&gt;video&lt;/a&gt;).
			Since then, we've been testing it out with tens of thousands of
			developers, reviewing their feedback and making adjustments. &lt;br
			/&gt;
			&lt;br /&gt;
			Today, we’re very happy to announce that all developers can now try the new
			Google Play Developer Console. At its core, the Developer Console is
			how you put your app in front of hundreds of millions of Android
			users around the world, and track how your app is doing. We hope that
			with a streamlined publishing flow, new language options, and new
			user ratings statistics, you’ll have better tools for delivering
			great Android apps that delight users.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;Sleeker, faster, easier to navigate&lt;/h3&gt;&lt;br /&gt;
			You spend a lot of time in the Developer Console, so we overhauled the
			interface for you. It's bright and appealing to look at, easy to find
			your way around using navigation and search, and it loads quickly
			even if you have a lot of apps. &lt;br /&gt;
			&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align:
			center;"&gt;&lt;img border="0" hedight="420"
			src="http://2.bp.blogspot.com/-MgN5DnoO5XU/UHYGYzTcAOI/AAAAAAAABs4/jTS7sKkfBcM/s1600/pubsites.png"
			width="680" /&gt;&lt;/div&gt;&lt;div style="padding-left: 3em;
			text-align: left;"&gt;&lt;strong&gt;Designed for
			speed&lt;/strong&gt;. Quickly locate the app data and business
			information you use every day. &lt;a
			href="https://plus.google.com/photos/108967384991768947849/albums/5797825533783012497"&gt;More
			screenshots &amp;raquo;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;Track user ratings over time, and find ways to improve&lt;/h3&gt;&lt;br
			/&gt;
			One of the most important things you'll be able to do is track the
			success of your app over time — it's how you continue to iterate and
			make beautiful, successful apps. You'll see new statistics about your
			user ratings: a graph showing changes over time, for both the
			all-time average user rating and new user ratings that come in on a
			certain day. As with other statistics, you'll be able to break down
			the data by device, country, language, carrier, Android version, and
			app version. For example, after optimizing your app for tablets, you
			could track your ratings on popular tablets.&lt;br /&gt;
			&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a
			href="http://4.bp.blogspot.com/-V-i7dwHKY8w/UHYPFoya0II/AAAAAAAABtg/lL1HXt71QQY/s1600/07_ratings_stats2.png"
			imageanchor="1" style="margin-left: 1em; margin-right:
			1em;"&gt;&lt;img border="0" heidght="231"
			src="http://4.bp.blogspot.com/-V-i7dwHKY8w/UHYPFoya0II/AAAAAAAABtg/lL1HXt71QQY/s1600/07_ratings_stats2.png"
			width="700" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="padding-left:
			3em; text-align: left;"&gt;&lt;strong&gt;New charts for user
			ratings&lt;/strong&gt;. You can now track user ratings over time and
			across countries. &lt;a
			href="https://plus.google.com/photos/108967384991768947849/albums/5797825533783012497"&gt;More
			screenshots &amp;raquo;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;Better publishing workflow&lt;/h3&gt;&lt;br /&gt;
			We've completely revamped and streamlined the app publishing process to
			give you more time to build great apps. You can start with either an
			APK or an app name, and you can save before you have all of the
			information. You can also now see differences between the new and old
			versions of an app, making it easy to catch unintentional changes
			before you publish a new version to your users.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;More languages for listings, with automated translations&lt;/h3&gt;&lt;br
			/&gt;
			You'll also enjoy a new app publishing flow and the ability to publish your
			app listing in 49 languages. Once you've saved any change to your
			application in the new Developer Console, your users will have the
			option of viewing an automatic translation of your listing on the web
			today and soon on devices — no additional action on your part is
			needed. &lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;How can you try the new version?&lt;/h3&gt;&lt;br /&gt;
			Go to your &lt;a
			href="https://play.google.com/apps/publish/"&gt;Developer
			Console&lt;/a&gt; and click on “Try the new version” in the header or
			&lt;a href="https://play.google.com/apps/publish/v2/"&gt;go directly
			to the new version&lt;/a&gt;. If you prefer the new version, don't
			forget to bookmark the new URL. &lt;br /&gt;
			&lt;br /&gt;
			Please note that we're not quite done yet, so the following advanced
			features are not yet supported in the new Google Play Developer
			Console: multiple APK support, APK Expansion Files and announcements.
			To use these features, you can click “Switch back” in the header at
			any time to return to the old version.&lt;br /&gt;
			&lt;br /&gt;
			Click the “Feedback” link in the header to let us know what you think, so
			that we can continue to improve your experience as a Google Play
			developer. Thank you for all of the feedback so far. &lt;br /&gt;
			&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/3MhuBdhGdDa"
			style="color: #333333; text-decoration: none;"&gt;&lt;br /&gt;
			&lt;/a&gt;&lt;br /&gt;
			&lt;div style="display: inline-block; float: right; line-height:
			0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/3MhuBdhGdDa"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/3MhuBdhGdDa"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font: bold 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/u/0/108967384991768947849/posts/3MhuBdhGdDa"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=i7nNesvA_IM:nH0l5lpPMLI:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=i7nNesvA_IM:nH0l5lpPMLI:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=i7nNesvA_IM:nH0l5lpPMLI:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/i7nNesvA_IM"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/5305339073424599517?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/5305339073424599517?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/i7nNesvA_IM/new-google-play-developer-console.html"
			title="New Google Play Developer Console Available to Everyone" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://2.bp.blogspot.com/-MgN5DnoO5XU/UHYGYzTcAOI/AAAAAAAABs4/jTS7sKkfBcM/s72-c/pubsites.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/10/new-google-play-developer-console.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;DEMFQH4-fyp7ImA9WhJaGUU.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-3711415969128767632
		</id>
		<published>2012-10-08T11:04:00.000-07:00</published>
		<updated>2012-10-11T13:13:31.057-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-10-11T13:13:31.057-07:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Google Play" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Best Practices" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Android Design" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Quality" />
		<category scheme="http://www.blogger.com/atom/ns#" term="User Interface" />
		<title>Building Quality Tablet Apps</title>
		<content type="html">&lt;em&gt;Posted by &lt;a
			href="https://plus.google.com/111169963967137030210?rel=author"&gt;Reto
			Meier&lt;/a&gt;, Android Developer Relations Tech
			Lead&lt;/em&gt;&lt;br /&gt;
			&lt;br /&gt;
			With the release of Nexus 7 earlier this year, we shared &lt;a
			href="http://android-developers.blogspot.com/2012/07/getting-your-app-ready-for-jelly-bean.html"&gt;some
			tips&lt;/a&gt; on how you can get your apps ready for a new wave of
			Android tablets. With the holiday season now approaching, we’re
			creating even more ways for great tablet apps to be featured in
			Google Play - including a series of new app collections that
			highlight great apps specifically for tablet users.&lt;br /&gt;
			&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align:
			center;float:right;"&gt;&lt;img border="0" height="269" width="400"
			src="http://1.bp.blogspot.com/-0r1jikbEFiU/UHMScKencJI/AAAAAAAABpY/rWirKGsDsf0/s400/tablet-collection.png"
			/&gt;&lt;/div&gt;To help you take advantage of the opportunity
			provided by the growing tablet market, we’ve put together this &lt;a
			href="http://developer.android.com/distribute/googleplay/quality/tablet.html"&gt;Tablet
			App Quality Checklist&lt;/a&gt; to make it easier for you to ensure
			your app meets the expectations of tablet users. &lt;br /&gt;
			&lt;br /&gt;
			The checklist includes a number of key focus areas for building apps
			that are a great experience on tablets, including:&lt;br /&gt;
			&lt;ul&gt;&lt;li&gt;Optimizing your layouts for larger
			screens&lt;/li&gt;
			&lt;li&gt;Taking advantage of extra screen area available on tablets&lt;/li&gt;
			&lt;li&gt;Using Icons and other assets that are designed for tablet
			screens&lt;/li&gt;
			&lt;/ul&gt;&lt;br /&gt;
			Each focus area comprises several smaller tasks or best practices. As you
			move through the checklist, you'll find links to support resources
			that can help you address the topics raised in each task.&lt;br /&gt;
			&lt;br /&gt;
			The benefits of building an app that works great on tablets is evident
			in the experiences of Mint.com, Tiny Co, and Instapaper who reported
			increased user engagement, better monetization, and more downloads
			from tablet users. You can find out more about their experience in
			these &lt;a
			href="http://developer.android.com/distribute/googleplay/spotlight/tablets.html"&gt;developer
			case studies&lt;/a&gt;.&lt;br /&gt;
			&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align:
			center;float:right;"&gt;&lt;img border="0" height="365" width="400"
			src="http://4.bp.blogspot.com/-lfjzgG5Dqrk/UHMThRtpRwI/AAAAAAAABpk/h4d3nsmkgPM/s400/mint.png"
			/&gt;&lt;/div&gt;The Tablet Quality Checklist is a great place to get
			started, but it’s just the beginning. We’ll be sharing more tablet
			development tips every day this week on &lt;a
			href="https://plus.google.com/108967384991768947849/posts"&gt;+Android
			Developers&lt;/a&gt;. In Android Developers Live, Tuesday’s &lt;a
			href="https://developers.google.com/live/shows/ahNzfmdvb2dsZS1kZXZlbG9wZXJzchkLEgVFdmVudBjT3pMEDAsSBUV2ZW50GAEM/"&gt;Android
			Design in Action&lt;/a&gt; broadcast will focus on optimizing user
			experience for tablets, on Thursday we’ll be interviewing our tablet
			case studies during &lt;a
			href="https://developers.google.com/live/shows/ahNzfmdvb2dsZS1kZXZlbG9wZXJzchoLEgVFdmVudBiIx_kDDAsSBUV2ZW50GOkHDA/"&gt;Developers
			Strike Back&lt;/a&gt;, and on Friday’s live YouTube broadcasts of
			&lt;a
			href="https://developers.google.com/live/shows/ahNzfmdvb2dsZS1kZXZlbG9wZXJzcg4LEgVFdmVudBia-K8EDA/"&gt;The
			App Clinic&lt;/a&gt; and &lt;a
			href="https://developers.google.com/live/shows/ahNzfmdvb2dsZS1kZXZlbG9wZXJzchoLEgVFdmVudBjw7_sDDAsSBUV2ZW50GOkHDA/"&gt;Friday
			Games Review&lt;/a&gt; will be reviewing apps and games on Android
			tablets.&lt;br /&gt;
			&lt;br /&gt;
			What are your best tips for building great &lt;br /&gt;
			tablet apps?&lt;br /&gt;
			&lt;a href="https://plus.google.com/+AndroidDevelopers/posts/Ea5zou6B3VY"
			style="text-decoration: none; color: #333;"&gt;&lt;br /&gt;
			&lt;div style="display: inline-block; line-height:
			0;float:right;"&gt;&lt;div style="float:left;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 0px;"&gt;Join the discussion on&lt;/span&gt;&lt;br /&gt;
			&lt;span style="font: bold 13px/16px arial,sans-serif; margin-right:
			4px; margin-top: 7px;"&gt;+Android Developers&lt;/span&gt;&lt;br
			/&gt;
			&lt;/div&gt;&lt;div style="float: right;"&gt;&lt;img
			src="https://ssl.gstatic.com/images/icons/gplus-32.png" width="32"
			height="32" style="border: 0;"/&gt;&lt;br /&gt;
			&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=0SB4tcIVYQo:jAhMllLHMR0:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=0SB4tcIVYQo:jAhMllLHMR0:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=0SB4tcIVYQo:jAhMllLHMR0:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/0SB4tcIVYQo"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/3711415969128767632?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/3711415969128767632?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/0SB4tcIVYQo/building-quality-tablet-apps.html"
			title="Building Quality Tablet Apps" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://1.bp.blogspot.com/-0r1jikbEFiU/UHMScKencJI/AAAAAAAABpY/rWirKGsDsf0/s72-c/tablet-collection.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/10/building-quality-tablet-apps.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;DE8ESXc9eyp7ImA9WhJaGUU.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-1131641799307480988
		</id>
		<published>2012-09-26T10:43:00.000-07:00</published>
		<updated>2012-10-11T13:20:08.963-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-10-11T13:20:08.963-07:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Google Play services" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Authentication" />
		<category scheme="http://www.blogger.com/atom/ns#" term="Google Play" />
		<title>Google Play services and OAuth Identity Tools</title>
		<content type="html">&lt;em&gt;Posted by &lt;a
			href="https://plus.google.com/107606703558161507946/posts"&gt;Tim
			Bray&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
			&lt;p&gt;The rollout of Google Play services to all Android 2.2+ devices
			worldwide is now complete, and all of those devices now have new
			tools for working with OAuth 2.0 tokens. This is an example of the
			kind of agility in rolling out new platform capabilities that Google
			Play services provides.&lt;/p&gt;&lt;h3&gt;Why OAuth 2.0
			Matters&lt;/h3&gt;&lt;p&gt;The Internet already has too many
			usernames and passwords, and they don’t scale. Furthermore, your
			Android device has a strong notion of who you are. In this situation,
			the industry consensus is that OAuth 2.0 is a good choice for the
			job, offering the promise of strong security minus
			passwords.&lt;/p&gt;&lt;p&gt;Google Play services make OAuth 2.0
			authorization available to Android apps that want to access Google
			APIs, with a good user experience and security.
			&lt;/p&gt;&lt;p&gt;Typically, when you want your Android app to use a
			Google account to access something, you have to pick which account on
			the device to use, then you have to generate an OAuth 2.0 token, then
			you have to use it in your HTTP-based dialogue with the resource
			provider.&lt;/p&gt;&lt;p&gt;These tasks are largely automated for you
			if you’re using a recent release of the &lt;a
			href="http://code.google.com/p/google-api-java-client/"&gt;Google
			APIs Client Library for Java&lt;/a&gt;; the discussion here applies
			if you want to access the machinery directly, for example in sending
			your own HTTP GETs and POSTs to a RESTful
			interface.&lt;/p&gt;&lt;h3&gt;Preparation&lt;/h3&gt;&lt;p&gt;Google
			Play services has just started rolling out, and even after the
			rollout is complete, will only be available on compatible Android
			devices running 2.2 or later. This is the vast majority, but there
			will be devices out there where it’s not available. It is also
			possible for a user to choose to disable the
			software.&lt;/p&gt;&lt;p&gt;For these reasons, before you can start
			making calls, you have to verify that Google Play services is
			installed. To do this, call &lt;a
			href="https://developers.google.com/android/google-play-services/reference/com/google/android/gms/common/GooglePlayServicesUtil#isGooglePlayServicesAvailable(android.content.Context)"&gt;isGooglePlayServicesAvailable()&lt;/a&gt;.
			The result codes, and how to deal with them, are documented in the
			&lt;a
			href="https://developers.google.com/android/google-play-services/reference/com/google/android/gms/common/ConnectionResult"&gt;ConnectionResult&lt;/a&gt;
			class.&lt;/p&gt;&lt;h3&gt;Choosing an Account&lt;/h3&gt;&lt;p&gt;This
			is not, and has never been, rocket science; there are many examples
			online that retrieve accounts from Android’s AccountManager and
			display some sort of pick list. The problem is that they all have
			their own look and feel, and for something like this, which touches
			on security, that’s a problem; the user has the right to expect
			consistency from the system.&lt;/p&gt;&lt;p&gt;Now you can use the
			handy &lt;a
			href="https://developers.google.com/android/google-play-services/reference/com/google/android/gms/common/AccountPicker"&gt;AccountPicker.newChooseAccountIntent()&lt;/a&gt;
			method to give you an Intent; feed it to startActivityForResult() and
			you’ll launch a nice standardized user experience that will return
			you an account (if the user feels like providing
			one).&lt;/p&gt;&lt;p&gt;Two things to note: When you’re talking to
			these APIs, they require a Google account (AccountManager can handle
			multiple flavors), so specify &lt;a
			href="https://developers.google.com/android/google-play-services/reference/com/google/android/gms/auth/GoogleAuthUtil#GOOGLE_ACCOUNT_TYPE"&gt;GoogleAuthUtil.GOOGLE_ACCOUNT_TYPE&lt;/a&gt;
			argument as the value for the
			&lt;code&gt;allowableAccountTypes&lt;/code&gt; argument. Second, you
			don’t need an android.accounts.Account object, you just use the
			email-address string (available in account.name) that uniquely
			identifies it.&lt;/p&gt;&lt;h3&gt;Getting a
			Token&lt;/h3&gt;&lt;p&gt;There’s really only one method call you need
			to use, &lt;a
			href="https://developers.google.com/android/google-play-services/reference/com/google/android/gms/autonlyh/GoogleAuthUtil#getToken(android.content.Context,%20java.lang.String,%20java.lang.String)"&gt;GoogleAuthUtil.getToken()&lt;/a&gt;.
			It takes three arguments: a Context, an email address, and another
			string argument called scope. Every information resource that is
			willing to talk OAuth 2.0 needs to publish which scope (or scopes) it
			uses. For example, to access the Google+ API, the scope is
			&lt;code&gt;oauth2:https://www.googleapis.com/auth/plus.me&lt;/code&gt;.
			You can provide multiple space-separated scopes in one call and get a
			token that provides access to all of them. Code like this might be
			typical:&lt;/p&gt;&lt;pre&gt;&lt;code&gt; private final static String
			G_PLUS_SCOPE =
			"oauth2:https://www.googleapis.com/auth/plus.me";
			private final static String USERINFO_SCOPE =
			"https://www.googleapis.com/auth/userinfo.profile";
			private final static String SCOPES = G_PLUS_SCOPE + " " +
			USERINFO_SCOPE;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In an ideal world,
			getToken() would be synchronous, but three things keep it from being
			that simple:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;The first time an
			app asks for a token to access some resource, the system will need to
			interact with the user to make sure they’re OK with
			that.&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;&lt;p&gt;Any time you ask for a token, the system may well have a network
			conversation with the identity back-end
			services.&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;&lt;p&gt;The infrastructure that handles these requests may be heavily loaded and
			not able to get you your token right away. Rather than keeping you
			waiting, or just failing, it may ask you to go away and come back a
			little later.&lt;/p&gt;&lt;/li&gt;
			&lt;/ol&gt;&lt;p&gt;The first consequence is obvious; you absolutely can’t call getToken()
			on the UI thread, since it’s subject to unpredictable delays.
			&lt;/p&gt;&lt;p&gt;When you call it, the following things can
			happen:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;It returns a token.
			That means that everything went fine, the back-end thinks the
			authorization was successful, and you should be able to proceed and
			use the token.&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;&lt;p&gt;It throws a &lt;a
			href="https://developers.google.com/android/google-play-services/reference/com/google/android/gms/auth/UserRecoverableAuthException"&gt;UserRecoverableAuthException&lt;/a&gt;,
			which means that you need to interact with the user, most likely to
			ask for their approval on using their account for this purpose. The
			exception has a getIntent() method, whose return value you can feed
			to startActivityForResult() to take care of that. Of course, you’ll
			need to be watching for the OK in the onActivityResult()
			method.&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;&lt;p&gt;It throws an IOException, which means that the authorization
			infrastructure is stressed, or there was a (not terribly uncommon on
			mobile devices) networking error. You shouldn’t give up instantly,
			because a repeat call might work. On the other hand, if you go back
			instantly and pester the server again, results are unlikely to be
			good. So you need to wait a bit; best practice would be the classic
			exponential-backoff pattern.&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;&lt;p&gt;It throws a &lt;a
			href="https://developers.google.com/android/google-play-services/reference/com/google/android/gms/auth/GoogleAuthException"&gt;GoogleAuthException&lt;/a&gt;,
			which means that authorization just isn’t going to happen, and you
			need to let your user down politely. This can happen if an invalid
			scope was requested, or the account for the email address doesn’t
			actually exist on the device.&lt;/p&gt;&lt;/li&gt;
			&lt;/ul&gt;&lt;p&gt;Here’s some sample
			code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt; try {
			// if this returns, the OAuth framework thinks the token should be
			usable
			String token = GoogleAuthUtil.getToken(this, mRequest.email(),
			mRequest.scope());
			response = doGet(token, this);

			} catch (UserRecoverableAuthException userAuthEx) {
			// This means that the app hasn't been authorized by the user for
			access
			// to the scope, so we're going to have to fire off the (provided)
			Intent
			// to arrange for that. But we only want to do this once. Multiple
			// attempts probably mean the user said no.
			if (!mSecondTry) {
			startActivityForResult(userAuthEx.getIntent(), REQUEST_CODE);
			response = null;
			} else {
			response = new Response(-1, null, "Multiple approval attempts");
			}

			} catch (IOException ioEx) {
			// Something is stressed out; the auth servers are by definition
			// high-traffic and you can't count on 100% success. But it would be
			// bad to retry instantly, so back off
			if (backoff.shouldRetry()) {
			backoff.backoff();
			response = authenticateAndGo(backoff);
			} else {
			response =
			new Response(-1, null, "No response from authorization server.");
			}

			} catch (GoogleAuthException fatalAuthEx) {
			Log.d(TAG, "Fatal Authorization Exception");
			response = new Response(-1, null, "Fatal authorization exception: " +
			fatalAuthEx.getLocalizedMessage());
			}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is from a &lt;a
			href="http://code.google.com/p/authorized-activity/"&gt;sample
			library&lt;/a&gt; I’ve posted on code.google.com with an
			AuthorizedActivity class that implements this. We think that some of
			this authorization behavior is going to be app-specific, so it’s not
			clear that this exact AuthorizedActivity recipe is going to work for
			everyone; but it’s Apache2-licensed, so feel free to use any pieces
			that work for you. It’s set up as a library project, and there’s also
			a small sample app called G+ Snowflake that uses it to return some
			statistics about your Google+ posts; the app is in the &lt;a
			href="https://play.google.com/store/apps/details?id=com.textuality.gpstats"&gt;Google
			Play Store&lt;/a&gt; and its &lt;a
			href="http://code.google.com/p/g-plus-snowflake/"&gt;source is
			online&lt;/a&gt; too.&lt;/p&gt;&lt;h3&gt;Registering Your
			App&lt;/h3&gt;&lt;p&gt;Most services that do OAuth 2.0 authorization
			want you to register your app, and Google’s are no exception. You
			need to visit the &lt;a href="https://code.google.com/apis/console/
			"&gt;Google APIs Console&lt;/a&gt;, create a project, pick the APIs
			you want to access off the Services menu, and then hit the API Access
			tab to do the registration. It’ll want you to enter your package
			name; the value of the package attribute of the
			&lt;code&gt;manifest&lt;/code&gt; element in your
			AndroidManifest.xml. &lt;/p&gt;&lt;p&gt;Also, it’ll want the SHA1
			signature of the certificate you used to sign your app. Anyone who’s
			published apps to Google Play Apps knows about keystores and signing.
			But before you get there, you’ll be working with your debug-version
			apps, which are signed with a certificate living in
			~/.android/debug.keystore (password: “android”). Fortunately, your
			computer probably already has a program called “keytool” installed;
			you can use this to get the signature. For your debug version, a
			correct incantation is:&lt;/p&gt;&lt;pre
			class="no-pretty-print"&gt;keytool -exportcert -alias androiddebugkey
			-keystore ~/.android/debug.keystore -v -list&lt;/pre&gt;&lt;p&gt;This
			will print out the SHA1 signature in a nicely labeled
			easy-to-cut-and-paste form.&lt;/p&gt;&lt;p&gt;This may feel a little
			klunky, but it’s worth it, because some magic is happening. When your
			app is registered and you generate a token and send it to a service
			provider, the provider can check with Google, which will confirm that
			yes, it issued that token, and give the package name of the app it
			was issued to. Those of you who who’ve done this sort of thing
			previously will be wondering about Client IDs and API Keys, but with
			this mechanism you don’t need them.&lt;/p&gt;&lt;h3&gt;Using Your
			Token&lt;/h3&gt;&lt;p&gt;Suppose you’ve registered your app and
			called GoogleAuthUtil.getToken() and received a token. For the
			purposes of this discussion, let’s suppose that it’s
			“MissassaugaParnassus42”. Then all you need to do is, when you send
			off an HTTP request to your service provider, include an HTTP header
			like so:&lt;/p&gt;&lt;pre class="no-pretty-print"&gt;Authorization:
			Bearer MissassaugaParnassus42&lt;/pre&gt;&lt;p&gt;Then your HTTP GETs
			and POSTs should Just Work. You should call GoogleAuthUtil.getToken()
			to get a token before each set of GETs or POSTs; it’s smart about
			caching things appropriately, and also about dealing with token
			expiry and refresh. &lt;/p&gt;&lt;p&gt;Once again, as I said at the
			top, if you’re happy using the &lt;a
			href="http://code.google.com/p/google-api-java-client/"&gt;Google
			APIs Client Library for Java&lt;/a&gt;, it’ll take care of all the
			client-side stuff; you’ll still need to do the developer console app
			registration.&lt;/p&gt;&lt;p&gt;Otherwise, there’s a little bit of
			coding investment here, but the payoff is pretty big: Secure,
			authenticated, authorized, service access with a good user
			experience.&lt;/p&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/eZaNYTZbc2d"
			style="text-decoration: none; color: #333;"&gt;&lt;br /&gt;
			&lt;div style="display: inline-block; line-height:
			0;float:right;"&gt;&lt;div style="float:left;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 11px;"&gt;Join the discussion on&lt;/span&gt;&lt;br /&gt;
			&lt;span style="font: bold 13px/16px arial,sans-serif; margin-right:
			4px; margin-top: 7px;"&gt;+Android Developers&lt;/span&gt;&lt;br
			/&gt;
			&lt;/div&gt;&lt;div style="float: right;"&gt;&lt;img
			src="https://ssl.gstatic.com/images/icons/gplus-32.png" width="32"
			height="32" style="border: 0;"/&gt;&lt;br /&gt;
			&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=3NbEDIhlBc0:Fl8pRDRe_wc:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=3NbEDIhlBc0:Fl8pRDRe_wc:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=3NbEDIhlBc0:Fl8pRDRe_wc:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/3NbEDIhlBc0"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/1131641799307480988?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/1131641799307480988?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/3NbEDIhlBc0/google-play-services-and-oauth-identity.html"
			title="Google Play services and OAuth Identity Tools" />
		<author>
			<name>Tim Bray</name>
			<uri>http://www.blogger.com/profile/00036641002026688852</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="22" height="32"
				src="http://3.bp.blogspot.com/_GTM_W5mVPTU/S9df2UvUAWI/AAAAAAAAAAM/XTF3Fh51McM/S220/Tim.jpg" />
		</author>
		<feedburner:origLink>http://android-developers.blogspot.com/2012/09/google-play-services-and-oauth-identity.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;CkcMSHozcSp7ImA9WhJWEUg.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-5824616113631656708
		</id>
		<published>2012-08-16T13:45:00.000-07:00</published>
		<updated>2012-08-16T13:48:09.489-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-08-16T13:48:09.489-07:00
		</app:edited>
		<title>Creating Your Own Spelling Checker Service</title>
		<content type="html">&lt;em&gt;Posted by Satoshi Kataoka and Ken
			Wakasa of the Android text input engineering team&lt;/em&gt;&lt;br
			/&gt;
			&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align: right;
			float:right;"&gt;&lt;img border="0" height="500"
			src="http://2.bp.blogspot.com/-QKlztEdM1aA/UC1bH6Kv4UI/AAAAAAAAADo/fQS8-EfBYIQ/s1600/spell-check-framed-new.png"
			/&gt;&lt;/div&gt;The Spelling Checker framework improves the
			text-input experience on Android by helping the user quickly identify
			and correct spelling errors. When an app uses the spelling checker
			framework, the user can see a red underline beneath misspelled or
			unrecognized words so that the user can correct mistakes instantly by
			choosing a suggestion from a dropdown list.&lt;br /&gt;
			&lt;br /&gt;
			If you are an input method editor (IME) developer, the Spelling Checker
			framework gives you a great way to provide an even better experience
			for your users. You can add your own spelling checker service to your
			IME to provide consistent spelling error corrections from your own
			custom dictionary. Your spelling checker can recognize and suggest
			corrections for the vocabularies that are most important to your
			users, and if your language is not supported by the built-in spelling
			checker, you can provide a spelling checker for that language.&lt;br
			/&gt;
			&lt;br /&gt;
			The &lt;a
			href="http://developer.android.com/guide/topics/text/spell-checker-framework.html"&gt;Spelling
			Checker APIs&lt;/a&gt; let you create your own spelling checker
			service with minimal steps. The framework manages the interaction
			between your spelling checker service and a text input field. In this
			post we’ll give you an overview of how to implement a spelling
			checker service. For details, take a look at the Spelling Checker
			Framework API Guide.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;1. Create a spelling checker service class&lt;/h3&gt;&lt;br /&gt;
			To create a spelling checker service, the first step is to create a
			spelling checker service class that extends &lt;a
			href="http://developer.android.com/reference/android/service/textservice/SpellCheckerService.html"&gt;android.service.textservice.SpellCheckerService&lt;/a&gt;.&lt;br
			/&gt;
			&lt;br /&gt;
			For a working example of a spelling checker, you may want to take a look
			at the &lt;code&gt;SampleSpellCheckerService&lt;/code&gt; class in
			the SpellChecker sample app, available from the Samples download
			package in the Android SDK.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;2. Implement the required methods&lt;/h3&gt;&lt;br /&gt;
			Next, in your subclass of &lt;a
			href="http://developer.android.com/reference/android/service/textservice/SpellCheckerService.html"&gt;SpellCheckerService&lt;/a&gt;,
			implement the methods &lt;a
			href="http://developer.android.com/reference/android/service/textservice/SpellCheckerService.html#createSession()"&gt;createSession()&lt;/a&gt;
			and &lt;a
			href="http://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#onGetSuggestions(android.view.textservice.TextInfo,%20int)"&gt;onGetSuggestions()&lt;/a&gt;,
			as shown in the following code snippet:&lt;br /&gt;
			&lt;pre&gt;@Override
			public Session createSession() {
			return new AndroidSpellCheckerSession();
			}

			private static class AndroidSpellCheckerSession extends Session {
			@Override
			public SuggestionsInfo onGetSuggestions(TextInfo textInfo, int
			suggestionsLimit) {
			SuggestionsInfo suggestionsInfo;
			... // look up suggestions for TextInfo
			return suggestionsInfo;
			}
			}&lt;/pre&gt;&lt;br /&gt;
			Note that the input argument &lt;code&gt;textInfo&lt;/code&gt; of &lt;a
			href="http://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#onGetSuggestions(android.view.textservice.TextInfo,%20int)"&gt;onGetSuggestions(TextInfo,
			int)&lt;/a&gt; contains a single word. The method returns suggestions
			for that word as a &lt;a
			href="http://developer.android.com/reference/android/view/textservice/SuggestionsInfo.html"&gt;SuggestionsInfo&lt;/a&gt;
			object. The implementation of this method can access your custom
			dictionary and any utility classes for extracting and ranking
			suggestions. &lt;br /&gt;
			&lt;br /&gt;
			For sentence-level checking, you can also implement &lt;a
			href="http://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#onGetSuggestionsMultiple(android.view.textservice.TextInfo[],
			int, boolean)"&gt;onGetSuggestionsMultiple()&lt;/a&gt;, which accepts
			an array of &lt;code&gt;TextInfo&lt;/code&gt;.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;3. Register the spelling checker service in
			AndroidManifest.xml&lt;/h3&gt;&lt;br /&gt;
			In addition to implementing your subclass, you need to declare the
			spelling checker service in your manifest file. The declaration
			specifies the application, the service, and a metadata file that
			defines the Activity to use for controlling settings. Here’s an
			example:&lt;br /&gt;
			&lt;pre&gt;&amp;lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
			package="com.example.android.samplespellcheckerservice"&amp;gt;
			&amp;lt;application android:label="@string/app_name"&amp;gt;
			&amp;lt;service
			android:label="@string/app_name"
			android:name=".SampleSpellCheckerService"
			android:permission="android.permission.BIND_TEXT_SERVICE"&amp;gt;
			&amp;lt;intent-filter&amp;gt;
			&amp;lt;action
			android:name="android.service.textservice.SpellCheckerService" /&amp;gt;
			&amp;lt;/intent-filter&amp;gt;
			&amp;lt;meta-data
			android:name="android.view.textservice.scs"
			android:resource="@xml/spellchecker" /&gt;
			&amp;lt;/service&amp;gt;
			&amp;lt;/application&amp;gt;
			&amp;lt;/manifest&amp;gt;&lt;/pre&gt;&lt;br /&gt;
			Notice that the service must request the permission &lt;a
			href="http://developer.android.com/reference/android/Manifest.permission.html#BIND_TEXT_SERVICE"&gt;android.permission.BIND_TEXT_SERVICE&lt;/a&gt;
			to ensure that only the system binds to the service.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;4. Create a metadata XML resource file&lt;/h3&gt;&lt;br /&gt;
			Last, create a metadata file for your spelling checker to define the
			Activity to use for controlling spelling checker settings. The
			metadata file can also define subtypes for the spelling checker.
			Place the file in the location specified in the &lt;br /&gt;
			element of the spelling checker declaration in the manifest file.&lt;br
			/&gt;
			&lt;br /&gt;
			In the example below, the metadata file spellchecker.xml specifies the
			settings Activity as
			&lt;code&gt;SpellCheckerSettingsActivity&lt;/code&gt; and includes
			subtypes to define the locales that the spelling checker can
			handle.&lt;br /&gt;
			&lt;pre&gt;&amp;lt;spell-checker xmlns:android="http://schemas.android.com/apk/res/android"
			android:label="@string/spellchecker_name"
			android:settingsactivity="com.example.SpellCheckerSettingsActivity"
			/&amp;gt;
			&amp;lt;subtype
			android:label="@string/subtype_generic"
			android:subtypeLocale="en" /&gt;
			&amp;lt;/spell-checker&gt;&lt;/pre&gt;&lt;br /&gt;
			That’s it! Your spelling checker service is now available to client
			applications such as your IME.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;Bonus points: Add batch processing of multiple sentences&lt;/h3&gt;&lt;br
			/&gt;
			For faster, more accurate spell-checking, &lt;a
			href="http://developer.android.com/about/versions/jelly-bean.html"&gt;Android
			4.1&lt;/a&gt; (Jelly Bean) introduces APIs that let clients pass
			multiple sentences to your spelling checker at once.&lt;br /&gt;
			&lt;br /&gt;
			To support sentence-level checking for multiple sentences in a single
			call, just override and implement the method &lt;a
			href="http://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[],
			int)"&gt;onGetSentenceSuggestionsMultiple()&lt;/a&gt;, as shown
			below. &lt;br /&gt;
			&lt;pre&gt;private static class AndroidSpellCheckerSession extends Session {
			@Override
			public SentenceSuggestionsInfo[] onGetSentenceSuggestionsMultiple(
			TextInfo[] textInfo, int suggestionsLimit) {
			SentenceSuggestionsInfo[] sentenceSuggestionsInfos;
			... // look up suggestions for each TextInfo
			return sentenceSuggestionsInfos
			}
			}&lt;/pre&gt;&lt;br /&gt;
			In this case, &lt;code&gt;textInfo&lt;/code&gt; is an array of &lt;a
			href="http://developer.android.com/reference/android/view/textservice/TextInfo.html"&gt;TextInfo&lt;/a&gt;,
			each of which holds a sentence. The method returns lengths and
			offsets of suggestions for each sentence as a &lt;a
			href="http://developer.android.com/reference/android/view/textservice/SentenceSuggestionsInfo.html"&gt;SentenceSuggestionsInfo&lt;/a&gt;
			object.&lt;br /&gt;
			&lt;br /&gt;
			&lt;h3&gt;Documents and samples&lt;/h3&gt;&lt;br /&gt;
			If you’d like to learn more about how to use the spelling checker APIs,
			take a look at these documents and samples:&lt;br /&gt;
			&lt;ul&gt;&lt;li&gt;&lt;a
			href="http://developer.android.com/guide/topics/text/spell-checker-framework.html"&gt;Spelling
			Checker Framework API Guide&lt;/a&gt; — a developer guide covering
			the Spelling Checker API for clients and services.&lt;/li&gt;
			&lt;li&gt;SampleSpellCheckerService sample app — helps you get
			started with your spelling checker service.&lt;br /&gt;
			&lt;ul&gt;&lt;li&gt;You can find the app at
			/samples/android-15/SpellChecker/SampleSpellCheckerService in the
			Samples download.&lt;/li&gt;
			&lt;/ul&gt;&lt;/li&gt;
			&lt;li&gt;HelloSpellChecker sample app &amp;mdash; a basic app that uses a spelling
			checker.&lt;br /&gt;
			&lt;ul&gt;&lt;li&gt;You can find the app at
			/samples/android-15/SpellChecker/HelloSpellChecker in the Samples
			download.&lt;/li&gt;
			&lt;/ul&gt;&lt;/li&gt;
			&lt;/ul&gt;To learn how to download sample apps for the Android SDK, see &lt;a
			href="http://developer.android.com/tools/samples/index.html"&gt;Samples&lt;/a&gt;.&lt;br
			/&gt;
			&lt;a
			href="https://plus.google.com/108967384991768947849/posts/4L5Yco9AdMJ"
			style="text-decoration: none; color: #333;"&gt;&lt;br /&gt;
			&lt;div style="display: inline-block; line-height:
			0;float:right;"&gt;&lt;div style="float:left;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 11px;"&gt;Join the discussion on&lt;/span&gt;&lt;br /&gt;
			&lt;span style="font: bold 13px/16px arial,sans-serif; margin-right:
			4px; margin-top: 7px;"&gt;+Android Developers&lt;/span&gt;&lt;br
			/&gt;
			&lt;/div&gt;&lt;div style="float: right;"&gt;&lt;img
			src="https://ssl.gstatic.com/images/icons/gplus-32.png" width="32"
			height="32" style="border: 0;"/&gt;&lt;br /&gt;
			&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=JvHTLu8PHwo:Twv_1_QjpYo:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=JvHTLu8PHwo:Twv_1_QjpYo:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=JvHTLu8PHwo:Twv_1_QjpYo:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/JvHTLu8PHwo"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/5824616113631656708?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/5824616113631656708?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/JvHTLu8PHwo/creating-your-own-spelling-checker.html"
			title="Creating Your Own Spelling Checker Service" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/08588467489110681140</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://2.bp.blogspot.com/-QKlztEdM1aA/UC1bH6Kv4UI/AAAAAAAAADo/fQS8-EfBYIQ/s72-c/spell-check-framed-new.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/08/creating-your-own-spelling-checker.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;D0EAQnY9eyp7ImA9WhJRFkg.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-8027479961655496370
		</id>
		<published>2012-07-18T15:03:00.000-07:00</published>
		<updated>2012-07-18T16:54:03.863-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-07-18T16:54:03.863-07:00
		</app:edited>
		<title>Getting Your App Ready for Jelly Bean and Nexus 7</title>
		<content type="html">&lt;div dir="ltr" style="text-align: left;"
			trbidi="on"&gt;[&lt;i&gt;This post is by &lt;a
			href="http://profiles.google.com/nickbutcher"&gt;Nick
			Butcher&lt;/a&gt;, an Android engineer who notices small
			imperfections, and they annoy him.&lt;/i&gt;]&lt;br /&gt;
			&lt;br /&gt;
			&lt;span itemprop="description"&gt;We are pleased to announce that the full
			SDK for Android 4.1 is now available to developers and can be
			downloaded through your SDK Manager. You can now develop and publish
			applications against API level 16 using &lt;a
			href="http://developer.android.com/about/versions/android-4.1.html"&gt;new
			Jelly Bean APIs&lt;/a&gt;.&lt;/span&gt; We are also releasing &lt;a
			href="http://developer.android.com/tools/sdk/tools-notes.html"&gt;SDK
			Tools revision 20.0.1&lt;/a&gt; and &lt;a
			href="http://developer.android.com/tools/sdk/ndk/index.html"&gt;NDK
			revision 8b&lt;/a&gt; containing bug fixes only.&lt;br /&gt;
			&lt;img border="0" height="275" width="320"
			src="http://4.bp.blogspot.com/-g05If_eKKRQ/UAcrVLI-OYI/AAAAAAAAAr8/AWvunVb5S-w/s320/nexus7.png"
			style="float:right;margin:20px 0 0 20px;" /&gt;&lt;br /&gt;
			For many people, their first taste of Jelly Bean will be on the
			beautiful &lt;a href="http://www.google.com/nexus/#/7"&gt;Nexus
			7&lt;/a&gt;. While most applications will run &lt;i&gt;just
			fine&lt;/i&gt; on Nexus 7, who wants their app to be just fine? Here
			are some tips for optimizing your application to make the most of
			this device.&lt;br /&gt;
			&lt;br /&gt;
			&lt;b&gt;Screen&lt;/b&gt;&lt;br /&gt;
			&lt;br /&gt;
			Giving Nexus 7 its name, is the glorious 7” screen. As developers we see
			this as around 600 * 960 density independent pixels and a density of
			&lt;code&gt;tvdpi&lt;/code&gt;. As &lt;a
			href="https://plus.google.com/105051985738280261832/posts/6eWwQvFGLV8"&gt;Dianne
			Hackborn&lt;/a&gt; has elaborated, this density might be a surprise
			to you but &lt;b&gt;don’t panic!&lt;/b&gt; We actively discourage you
			from rushing out and creating new assets at this density; Android
			will scale your existing assets for you. In fact the entire Jelly
			Bean OS contains only a single &lt;code&gt;tvdpi&lt;/code&gt; asset,
			the remainder are scaled down from &lt;code&gt;hdpi&lt;/code&gt;
			assets. &lt;br /&gt;
			&lt;br /&gt;
			To be sure the system can successfully scale your
			&lt;code&gt;hdpi&lt;/code&gt; assets for
			&lt;code&gt;tvdpi&lt;/code&gt;, take special care that your &lt;a
			href="http://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch"&gt;9-patch
			images&lt;/a&gt; are created correctly so that they can be scaled
			down effectively: &lt;br /&gt;
			&lt;ul&gt;&lt;li&gt;Make sure that any stretchable regions are at least 2x2 pixels in size,
			else they risk disappearing when scaled down.&lt;/li&gt;
			&lt;li&gt;Give one pixel of extra safe space in the graphics before
			and after stretchable regions else interpolation during scaling may
			cause the color at the boundaries to change.&lt;/li&gt;
			&lt;/ul&gt;&lt;p&gt;The 7” form factor gives you more space to
			present your content. You can use the
			&lt;code&gt;sw600dp&lt;/code&gt; &lt;a
			href="http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources"&gt;resource
			qualifier&lt;/a&gt; to provide alternative layouts for this size
			screen. For example your application may contain a layout for your
			launch
			activity:&lt;/p&gt;&lt;pre&gt;res/layout/activity_home.xml&lt;/pre&gt;To
			take advantage of the extra space on the 7” screen you might provide
			an alternative layout:&lt;br /&gt;
			&lt;pre&gt;res/layout-&lt;b&gt;sw600dp&lt;/b&gt;/activity_home.xml&lt;/pre&gt;The
			&lt;code&gt;sw600dp&lt;/code&gt; qualifier declares that these
			resources are for devices that have a screen with at least 600dp
			available on its smallest side. &lt;br /&gt;
			&lt;br /&gt;
			Furthermore you might even provide a different layout for 10” tablets:&lt;br
			/&gt;
			&lt;pre&gt;res/layout-&lt;b&gt;sw720dp&lt;/b&gt;/activity_home.xml&lt;/pre&gt;This
			technique allows a single application to use defined switching points
			to respond to a device’s configuration and present an optimized
			layout of your content. &lt;br /&gt;
			&lt;br /&gt;
			Similarly if you find that your phone layout works well on a 7” screen but
			requires slightly larger font or image sizes then you can use a
			single layout but specify alternative sizes in &lt;a
			href="http://developer.android.com/guide/topics/resources/more-resources.html#Dimension"&gt;dimensions
			files&lt;/a&gt;. For example
			&lt;code&gt;res/values/dimens.xml&lt;/code&gt; may contain a font
			size dimension:&lt;br /&gt;
			&lt;pre&gt;&amp;lt;dimen name="text_size"&amp;gt;18sp&amp;lt;/dimen&amp;gt;&lt;/pre&gt;but
			you can specify an alternative text size for 7” tablets in
			&lt;code&gt;res/values-&lt;b&gt;sw600dp&lt;/b&gt;/dimens.xml&lt;/code&gt;:&lt;br
			/&gt;
			&lt;pre&gt;&amp;lt;dimen
			name="text_size"&amp;gt;32sp&amp;lt;/dimen&amp;gt;&lt;/pre&gt;&lt;b&gt;Hardware&lt;/b&gt;&lt;br
			/&gt;
			&lt;br /&gt;
			Nexus 7 has different hardware features from most phones:&lt;br /&gt;
			&lt;ul&gt;&lt;li&gt;No telephony&lt;br /&gt;
			&lt;li&gt;A single front facing camera (apps requiring the
			&lt;code&gt;android.hardware.camera&lt;/code&gt; feature will not be
			available on Nexus 7)&lt;/li&gt;&lt;br /&gt;
			&lt;/ul&gt;&lt;p&gt;Be aware of which system features that you declare (or &lt;a
			href="http://developer.android.com/guide/topics/manifest/uses-feature-element.html#implicit"&gt;imply&lt;/a&gt;)
			are &lt;a
			href="http://developer.android.com/guide/topics/manifest/uses-feature-element.html#required"&gt;required&lt;/a&gt;
			to run your application or the Play Store will not make your
			application available to Nexus 7 users. Always declare hardware
			features that aren't critical to your app as
			&lt;code&gt;required="false"&lt;/code&gt; then detect at runtime if
			the feature is present and progressively enhance functionality. For
			example if your app can use the camera but it isn’t essential to its
			operation, you would declare it
			with:&lt;/p&gt;&lt;pre&gt;&amp;lt;uses-feature
			android:name="android.hardware.camera"
			&lt;b&gt;android:required="false"&lt;/b&gt;/&amp;gt;&lt;/pre&gt;&lt;p&gt;For
			more details follow Reto Meier’s &lt;a
			href="http://android-developers.blogspot.co.uk/2010/10/five-steps-to-future-hardware-happiness.html"&gt;Five
			Steps to Hardware
			Happiness&lt;/a&gt;.&lt;/p&gt;&lt;b&gt;Conclusion&lt;/b&gt;
			&lt;p&gt;Nexus 7 ships with Jelly Bean and its updated suite of
			system apps are built to take advantage of new &lt;a
			href="http://developer.android.com/about/versions/android-4.1.html"&gt;Jelly
			Bean APIs&lt;/a&gt;. These apps are the standard against which
			&lt;b&gt;your application&lt;/b&gt; will be judged — make sure that
			you’re keeping up! &lt;/p&gt;&lt;p&gt;If your application shows
			notifications then consider utilizing the new &lt;a
			href="http://developer.android.com/about/versions/android-4.1.html#UI"&gt;richer
			notification styles&lt;/a&gt;. If you are displaying immersive
			content then &lt;a
			href="http://developer.android.com/reference/android/view/View.html#setSystemUiVisibility(int)"&gt;control
			the appearance&lt;/a&gt; of the system UI. If you are still using the
			&lt;a
			href="http://android-developers.blogspot.co.uk/2012/01/say-goodbye-to-menu-button.html"&gt;options
			menu&lt;/a&gt; then move to the &lt;a
			href="http://developer.android.com/design/patterns/actionbar.html"&gt;Action
			Bar&lt;/a&gt; pattern.&lt;/p&gt;&lt;p&gt;A lot of work has gone into
			making Jelly Bean &lt;a
			href="https://developers.google.com/events/io/sessions/gooio2012/109/"&gt;buttery
			smooth&lt;/a&gt;; make sure your app is as well. If you haven’t yet
			opted in to &lt;a
			href="http://developer.android.com/guide/topics/graphics/hardware-accel.html"&gt;hardware
			accelerated rendering&lt;/a&gt; then now is the time to implement and
			test this.&lt;/p&gt;&lt;p&gt;For more information on Android 4.1
			visit the &lt;a
			href="http://developer.android.com/about/versions/jelly-bean.html"&gt;Android
			Developers&lt;/a&gt; site or join us &lt;a
			href="https://developers.google.com/live/android"&gt;Live&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/iwdKLZvY5cz"
			style="text-decoration: none; color: #333;"&gt; &lt;div
			style="display: inline-block; line-height: 0;float:right;"&gt;&lt;div
			style="float:left;"&gt;&lt;span style="font: 13px/16px
			arial,sans-serif; margin-right: 4px; margin-top: 11px;"&gt;Join the
			discussion on&lt;/span&gt; &lt;span style="font: bold 13px/16px
			arial,sans-serif; margin-right: 4px; margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt; &lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;img
			src="https://ssl.gstatic.com/images/icons/gplus-32.png" width="32"
			height="32" style="border: 0;padding:0 0 0 5px"&gt;
			&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=EWQ0EHb-4lc:Au4UaHzC0lo:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=EWQ0EHb-4lc:Au4UaHzC0lo:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=EWQ0EHb-4lc:Au4UaHzC0lo:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/EWQ0EHb-4lc"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/8027479961655496370?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/8027479961655496370?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/EWQ0EHb-4lc/getting-your-app-ready-for-jelly-bean.html"
			title="Getting Your App Ready for Jelly Bean and Nexus 7" />
		<author>
			<name>Android Developer Relations</name>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://4.bp.blogspot.com/-g05If_eKKRQ/UAcrVLI-OYI/AAAAAAAAAr8/AWvunVb5S-w/s72-c/nexus7.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/07/getting-your-app-ready-for-jelly-bean.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;AkQFSXY7cCp7ImA9WhJSGUg.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-672904818744879121
		</id>
		<published>2012-07-10T11:09:00.001-07:00</published>
		<updated>2012-07-10T15:11:58.808-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-07-10T15:11:58.808-07:00
		</app:edited>
		<title>Google I/O and Beyond</title>
		<content type="html">&lt;div dir="ltr" style="text-align: left;"
			trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;"
			trbidi="on"&gt;&lt;span style="background-color:
			white;"&gt;[&lt;/span&gt;&lt;i style="background-color:
			white;"&gt;This post is by &lt;a
			href="https://plus.google.com/111169963967137030210?rel=author"&gt;Reto
			Meier&lt;/a&gt;, Android Developer Relations Tech
			Lead&lt;/i&gt;&lt;span style="background-color:
			white;"&gt;]&lt;/span&gt;&lt;br /&gt;
			&lt;br /&gt;
			With most of the Android Developer Relations team now fully recovered
			from Google I/O 2012, I'm happy to announce that all of the videos
			for the Google I/O 2012 Android Sessions are now available!&lt;br
			/&gt;
			&lt;br /&gt;
			I've included in the &lt;a
			href="http://www.youtube.com/playlist?list=PL4C6BCDE45E05F49E"&gt;Google
			I/O 12 - The Android Sessions&lt;/a&gt; playlist (embedded below), as
			well as (in keeping with our newly redesigned &lt;a
			href="http://developer.android.com/"&gt;developer
			site&lt;/a&gt;)&amp;nbsp;in playlists for each developer
			category:&amp;nbsp;&lt;i&gt;&lt;a
			href="http://www.youtube.com/playlist?list=PL54FA004D676C3EE9"&gt;Design&lt;/a&gt;&lt;/i&gt;,
			&lt;a
			href="http://www.youtube.com/playlist?list=PL46069800A957F535"&gt;&lt;i&gt;develop&lt;/i&gt;&lt;/a&gt;,
			and &lt;i&gt;&lt;a
			href="http://www.youtube.com/playlist?list=PLCE21051AA158A8F6"&gt;distribute&lt;/a&gt;&lt;/i&gt;.&lt;br
			/&gt;
			&lt;br /&gt;
			&lt;iframe allowfullscreen="" frameborder="0" height="360"
			src="http://www.youtube.com/embed/videoseries?list=PL4C6BCDE45E05F49E&amp;amp;hl=en_US"
			width="640"&gt;&lt;/iframe&gt;&lt;br /&gt;
			&lt;br /&gt;
			Google I/O is always a highlight on the &lt;a
			href="https://plus.google.com/108967384991768947849/posts/fLdVnRnKbPR"&gt;Android
			Developer Relations team&lt;/a&gt;'s calendar; it's our best
			opportunity to talk directly to the Android developer community.
			Unfortunately I/O only happens once a year, and only a lucky few
			thousand can join us in person.&lt;br /&gt;
			&lt;br /&gt;
			&lt;span itemprop="description"&gt;That's why we've been exploring more
			scalable approaches to interacting with developers, and with the
			launch of &lt;a
			href="https://developers.google.com/live/android"&gt;Google
			Developers Live&lt;/a&gt;, we have a way for the entire Android
			Developer community to view and participate in live, interactive
			developer-focused broadcasts all year round, and all across the
			world.&lt;/span&gt;&lt;br /&gt;
			&lt;br /&gt;
			This week we resume our weekly interactive development
			Q&amp;amp;A&amp;nbsp;Office Hours&amp;nbsp;in three time zones (US,
			EMEA, and APAC). &amp;nbsp;We know many of you have questions related
			to specific I/O sessions, so we've invited all the speakers to join
			us, starting with this Wednesday's&amp;nbsp;&lt;a
			href="https://developers.google.com/live/shows/ahNzfmdvb2dsZS1kZXZlbG9wZXJzcg4LEgVFdmVudBi_4rUCDA/"&gt;Android
			Developer Office Hours&lt;/a&gt;&amp;nbsp;with Chet Haase, Romain
			Guy, Xavier Ducrohet, and Tor Norbye from the &lt;a
			href="https://developers.google.com/events/io/sessions/gooio2012/105/"&gt;What's
			New in Jelly Bean&lt;/a&gt;&amp;nbsp;and &lt;a
			href="https://developers.google.com/events/io/sessions/gooio2012/104/"&gt;What's
			new in Android Developer Tools&lt;/a&gt; sessions.&lt;br /&gt;
			&lt;br /&gt;
			On Friday afternoons we broadcast&amp;nbsp;&lt;a
			href="https://developers.google.com/live/shows/ahNzfmdvb2dsZS1kZXZlbG9wZXJzcg4LEgVFdmVudBj-lK4CDA/"&gt;The
			Friday Review of Apps&lt;/a&gt; and &lt;a
			href="https://developers.google.com/live/shows/ahNzfmdvb2dsZS1kZXZlbG9wZXJzcg4LEgVFdmVudBjDkYYDDA/"&gt;The
			Friday Review of Games&lt;/a&gt;, two more relaxed sessions where we
			review self-nominated apps and games, providing feedback to the
			developers in the hope of discovering some feature-worthy gems.&lt;br
			/&gt;
			&lt;br /&gt;
			Every Android Developer Live broadcast is recorded and available from
			Google Developers Live, the &lt;a
			href="http://www.youtube.com/user/androiddevelopers"&gt;Android
			Developers YouTube channel&lt;/a&gt;, and directly from &lt;a
			href="http://developer.android.com/"&gt;developer.android.com&lt;/a&gt;.&amp;nbsp;We've
			also begun to make each of the Office Hours, as well as the Android
			sessions from Google I/O 2012, available as part of the &lt;a
			href="http://feeds.feedburner.com/AndroidDevelopersLivePodcast"&gt;Android
			Developers Live audio podcast&lt;/a&gt;.&lt;br /&gt;
			&lt;br /&gt;
			We're really excited to use Google Developers Live to interact more
			regularly with you, the most important members of the Android
			ecosystem, and will be looking to expand our lineup to include
			regular interviews with app developers and Android engineers. &lt;br
			/&gt;
			&lt;br /&gt;
			Got great ideas for how we can expand our live program? Let us know on
			&lt;a
			href="http://developer.android.com/+"&gt;Google+&lt;/a&gt;.&lt;/div&gt;&lt;br
			/&gt;
			&lt;div style="display: inline-block; float: right; line-height:
			0;"&gt;&lt;div style="float: left;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/AHKYp1R5odH"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font-family: arial, sans-serif; font-size: 13px; font-style:
			normal; font-variant: normal; font-weight: normal; line-height: 16px;
			margin-right: 4px; margin-top: 11px;"&gt;Join the discussion
			on&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/108967384991768947849/posts/AHKYp1R5odH"
			style="color: #333333; text-decoration: none;"&gt;&lt;span
			style="font-family: arial, sans-serif; font-size: 13px; font-style:
			normal; font-variant: normal; font-weight: bold; line-height: 16px;
			margin-right: 4px; margin-top: 7px;"&gt;+Android
			Developers&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="float:
			right;"&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/AHKYp1R5odH"
			style="color: #333333; text-decoration: none;"&gt;&lt;img height="32"
			src="https://ssl.gstatic.com/images/icons/gplus-32.png"
			style="border: 0;" width="32" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;
			&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=Rd6j0OAliBE:ZSYYX-QGvMY:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=Rd6j0OAliBE:ZSYYX-QGvMY:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=Rd6j0OAliBE:ZSYYX-QGvMY:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/Rd6j0OAliBE"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/672904818744879121?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/672904818744879121?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/Rd6j0OAliBE/google-io-and-beyond.html"
			title="Google I/O and Beyond" />
		<author>
			<name>Android Developer Relations</name>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://img.youtube.com/vi/videoseries/default.jpg" height="72"
			width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/07/google-io-and-beyond.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;A0UGSH0zfCp7ImA9WhJTGEQ.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-1285468549889733246
		</id>
		<published>2012-06-28T07:51:00.000-07:00</published>
		<updated>2012-06-28T09:00:29.384-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-06-28T09:00:29.384-07:00
		</app:edited>
		<title>Android SDK Tools, Revision 20</title>
		<content type="html">&lt;div dir="ltr" style="text-align: left;"
			trbidi="on"&gt;
			&lt;i&gt;[This post is by &lt;a
			href="https://plus.google.com/109385828142935151413/posts"&gt;Xavier
			Ducrohet&lt;/a&gt;, Tech Lead for the Android developer
			tools]&lt;/i&gt;&lt;br /&gt;
			&lt;br /&gt;
			Along with the preview of the Android 4.1 (Jelly Bean) platform, we
			launched Android SDK Tools R20 and ADT 20.0.0. Here are a few things
			that we would like to highlight.&lt;br /&gt;
			&lt;ol&gt;&lt;i&gt;Application templates&lt;/i&gt;: Android ADT
			supports a new application templates for creating new application,
			blank activity, master-detail flow, and custom view. These templates
			support the Android style guide thus making it faster and easier to
			build beautiful apps. More templates will be added over
			time.&lt;/ol&gt;
			&lt;div class="separator" style="clear: both; text-align: center;"&gt;
			&lt;a
			href="http://1.bp.blogspot.com/-Kp1qE5du6l8/T-xurIjfPgI/AAAAAAAABAM/kuWQwPgi0rw/s1600/newactivity+(1).png"
			imageanchor="1" style="margin-left: 1em; margin-right:
			1em;"&gt;&lt;img border="0" height="432"
			src="http://1.bp.blogspot.com/-Kp1qE5du6l8/T-xurIjfPgI/AAAAAAAABAM/kuWQwPgi0rw/s640/newactivity+(1).png"
			width="640" /&gt;&lt;/a&gt;&lt;/div&gt;
			&lt;div&gt;
			&lt;br /&gt;&lt;/div&gt;
			&lt;ol&gt;&lt;i&gt;Tracer for GLES&lt;/i&gt;: With this new tool you can capture the entire
			sequence of OpenGL calls made by an app into a trace file on the host
			and replay the captured trace and display the GL state at any point
			in time.&lt;/ol&gt;
			&lt;div&gt;
			&lt;a
			href="http://1.bp.blogspot.com/-mlnLsS17Uk4/T-xuqvOj8cI/AAAAAAAABAE/SdIEwlzxl1A/s1600/gl2+(1).png"
			imageanchor="1" style="margin-left: 1em; margin-right: 1em;
			text-align: center;"&gt;&lt;img border="0" height="480"
			src="http://1.bp.blogspot.com/-mlnLsS17Uk4/T-xuqvOj8cI/AAAAAAAABAE/SdIEwlzxl1A/s640/gl2+(1).png"
			width="640" /&gt;&lt;/a&gt;&lt;/div&gt;
			&lt;ol&gt;&lt;i&gt;Device Monitor&lt;/i&gt;: To help you to easily debug your apps, all the
			Android debugging tools like DDMS, traceview, hierarchyviewer and
			Tracer for GLES are now built into one single application.&lt;/ol&gt;
			&lt;ol&gt;&lt;i&gt;Systrace&lt;/i&gt;: Improving app performance does
			not have to be a guesswork any more. Systrace for Jelly Bean and
			above lets you easily optimize your app. You can capture a slice of
			system activity plus additional information tagged from the
			&lt;code&gt;Settings &amp;gt; Developer Options &amp;gt; Monitoring:
			Enable traces&lt;/code&gt; or with specific calls added to your
			application code.&lt;/ol&gt;
			&lt;div&gt;
			&lt;a
			href="http://2.bp.blogspot.com/-pTB-LidV1zY/T-xuqPNML-I/AAAAAAAAA_8/adGKkXxgHhM/s1600/SystraceScreenshot+(1).png"
			imageanchor="1" style="margin-left: 1em; margin-right: 1em;
			text-align: center;"&gt;&lt;img border="0" height="500"
			src="http://2.bp.blogspot.com/-pTB-LidV1zY/T-xuqPNML-I/AAAAAAAAA_8/adGKkXxgHhM/s640/SystraceScreenshot+(1).png"
			width="640" /&gt;&lt;/a&gt;&lt;/div&gt;
			&lt;div&gt;
			&lt;br /&gt;&lt;/div&gt;
			To learn more on the layout editor, XML editing, build system &amp;amp;
			SDK Manager improvements, please read the &lt;a
			href="http://developer.android.com/tools/sdk/eclipse-adt.html"&gt;ADT
			20.0.0&lt;/a&gt; and &lt;a
			href="http://developer.android.com/tools/sdk/tools-notes.html"&gt;SDK
			Tools R20&lt;/a&gt; release notes.&lt;br /&gt;
			&lt;br /&gt;
			Join us today, June 28th, at the “&lt;a
			href="https://developers.google.com/events/io/sessions/gooio2012/104/"&gt;What’s
			new in Android developer tools&lt;/a&gt;” session for some fun tool
			demos and a sneak-peak into what’s coming next.&lt;/div&gt;&lt;div
			class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=9QpqB-UVPso:Dro_39itmv0:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=9QpqB-UVPso:Dro_39itmv0:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=9QpqB-UVPso:Dro_39itmv0:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/9QpqB-UVPso"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/1285468549889733246?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/1285468549889733246?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/9QpqB-UVPso/android-sdk-tools-revision-20.html"
			title="Android SDK Tools, Revision 20" />
		<author>
			<name>Android Developer Relations</name>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://1.bp.blogspot.com/-Kp1qE5du6l8/T-xurIjfPgI/AAAAAAAABAM/kuWQwPgi0rw/s72-c/newactivity+(1).png"
			height="72" width="72" />
		<georss:featurename>Moscone West, San Francisco</georss:featurename>
		<georss:point>37.78305327797615 -122.40398168563843</georss:point>
		<georss:box>37.78226877797615 -122.40521568563842 37.78383777797615
			-122.40274768563843</georss:box>
		<feedburner:origLink>http://android-developers.blogspot.com/2012/06/android-sdk-tools-revision-20.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;DE8NSHcyfCp7ImA9WhJTGEw.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-9203976972341568128
		</id>
		<published>2012-06-27T10:08:00.000-07:00</published>
		<updated>2012-06-27T10:08:19.994-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-06-27T10:08:19.994-07:00
		</app:edited>
		<title>Introducing Android 4.1 (Jelly Bean) preview platform, and more
		</title>
		<content type="html">&lt;div dir="ltr" style="text-align: left;"
			trbidi="on"&gt;
			&lt;i&gt;[This post is by &lt;a
			href="https://plus.google.com/100745390980338589225/posts"&gt;Angana
			Ghosh&lt;/a&gt;, Product Manager on the Android team]&lt;/i&gt;&lt;br
			/&gt;
			&lt;i&gt;&lt;br /&gt;
			&lt;/i&gt; &lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align: center;"&gt;
			&lt;a
			href="http://4.bp.blogspot.com/-P0b2RM0Yflo/T-sod7ZWSdI/AAAAAAAAA_s/Lh1QoJEWjkI/s1600/jbean_srgb.png"
			imageanchor="1" style="clear: right; float: right; margin-bottom:
			1em; margin-left: 1em;"&gt;&lt;img border="0" height="320"
			src="http://4.bp.blogspot.com/-P0b2RM0Yflo/T-sod7ZWSdI/AAAAAAAAA_s/Lh1QoJEWjkI/s320/jbean_srgb.png"
			width="270" /&gt;&lt;/a&gt;&lt;/div&gt;
			&lt;span id="goog_1197444568"&gt;&lt;/span&gt;&lt;span
			id="goog_1197444569"&gt;&lt;/span&gt;At Google I/O today we announced
			the latest version of the Android platform, Android 4.1 (Jelly Bean).
			With Jelly Bean, we’ve made the great things about Android even
			better with improved system performance and enhanced user
			features.&lt;br /&gt;
			&lt;br /&gt;
			Improvements include a smoother and more responsive UI across the system, a home
			screen that automatically adapts to fit your content, a powerful
			predictive keyboard, richer and more interactive notifications,
			larger payload sizes for Android Beam sharing and much more. For a
			lowdown on what’s new, head over to the &lt;a
			href="http://developer.android.com/about/versions/jelly-bean.html"&gt;Jelly
			Bean platform highlights&lt;/a&gt;.&lt;br /&gt;
			&lt;br /&gt;
			Of course, Jelly Bean wouldn’t be complete without a healthy serving of
			new APIs for app developers. Here are some of the new APIs that Jelly
			Bean introduces:&lt;br /&gt;
			&lt;ol&gt;&lt;i&gt;Expandable notifications&lt;/i&gt;: Android 4.1 brings a major update to the
			Android notifications framework. Apps can now display larger, richer
			notifications to users that can be expanded and collapsed with a
			pinch. Users can now take actions directly from the notification
			shade, and notifications support new types of content, including
			photos.&lt;/ol&gt;
			&lt;ol&gt;&lt;i&gt;Android Beam&lt;/i&gt;: In Android 4.1, Android Beam makes it easier to
			share images, videos, or other payloads by leveraging Bluetooth for
			the data transfer.&lt;/ol&gt;
			&lt;ol&gt;&lt;i&gt;Bi-directional text support&lt;/i&gt;: Android 4.1 helps you to reach more users
			through support for for bi-directional text in TextView and EditText
			elements.&lt;/ol&gt;
			&lt;ol&gt;&lt;i&gt;Gesture mode&lt;/i&gt;: New APIs for accessibility services let you handle
			gestures and manage accessibility focus. Now you can traverse any
			element on the screen using gestures, accessories, you name
			it.&lt;/ol&gt;
			&lt;ol&gt;&lt;i&gt;Media codec access&lt;/i&gt;: Provides low-level access to platform
			hardware and software codecs.&lt;/ol&gt;
			&lt;ol&gt;&lt;i&gt;Wi-Fi Direct service discoverability&lt;/i&gt;: New API provides
			pre-associated service discovery letting apps get more information
			from nearby devices about the services they support, before they
			attempt to connect. &lt;/ol&gt;
			&lt;ol&gt;&lt;i&gt;Network bandwidth management&lt;/i&gt;: New API provides ability to detect
			metered networks, including tethering to a mobile hotspot.
			&lt;/ol&gt;
			For a complete overview of new APIs in Jelly Bean, please read the &lt;a
			href="http://developer.android.com/about/versions/android-4.1.html"&gt;API
			highlights&lt;/a&gt; document. Note that this is a preview of the
			Jelly Bean platform. While we’re still finalizing the API
			implementations we wanted to give developers a look at the new API to
			begin planning app updates. We’ll be releasing a final platform in a
			few weeks that you should use to build and publish applications for
			Android 4.1.&lt;br /&gt;
			&lt;br /&gt;
			For Android devices with the Google Play, we launched the following at
			Google I/O today:&lt;br /&gt;
			&lt;ol&gt;&lt;i&gt;Smart app updates&lt;/i&gt;: For Android 2.3, Gingerbread devices and up,
			when there is a new version of an app in Google Play, only the parts
			of the app that changed are downloaded to users’ devices. On average,
			a smart app update is a third the size of a full apk update. This
			means your users save bandwidth and battery and the best part? You
			don’t have to do a thing. This is automatically enabled for all apps
			downloaded from Google Play. &lt;/ol&gt;
			&lt;ol&gt;&lt;i&gt;App encryption&lt;/i&gt;: From Jelly Bean and forward, paid apps in
			Google Play are encrypted with a device-specific key before they are
			delivered and stored on the device. We know you work hard building
			your apps. We work hard to protect your investment.&lt;/ol&gt;
			&lt;ol&gt;&lt;i&gt;Google Cloud Messaging for Android&lt;/i&gt;: This
			is the next version of C2DM and goes back to Froyo. Getting started
			is easy and has a whole bunch of new APIs than C2DM has to offer. If
			you sign-up for GCM, you will be able to see C2DM and GCM stats in
			the Android developer console. Most importantly, the service is free
			and there are no quotas. [&lt;a
			href="http://developer.android.com/guide/google/gcm/index.html"&gt;Learn
			more&lt;/a&gt;.]&lt;/ol&gt;
			Starting from today, &lt;a
			href="https://developers.google.com/events/io/sessions#android"&gt;over
			20 Android sessions&lt;/a&gt; at Google I/O will deep-dive in many of
			these areas. Join us in-person or follow us live. &lt;/div&gt;&lt;div
			class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=DsJb6WCqlHg:rs7PCh3oXhc:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=DsJb6WCqlHg:rs7PCh3oXhc:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=DsJb6WCqlHg:rs7PCh3oXhc:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/DsJb6WCqlHg"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/9203976972341568128?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/9203976972341568128?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/DsJb6WCqlHg/introducing-android-41-jelly-bean.html"
			title="Introducing Android 4.1 (Jelly Bean) preview platform, and more" />
		<author>
			<name>Android Developer Relations</name>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://4.bp.blogspot.com/-P0b2RM0Yflo/T-sod7ZWSdI/AAAAAAAAA_s/Lh1QoJEWjkI/s72-c/jbean_srgb.png"
			height="72" width="72" />
		<georss:featurename>Moscone West</georss:featurename>
		<georss:point>37.783265262376574 -122.40346670150757</georss:point>
		<georss:box>37.781696762376576 -122.40593420150756 37.78483376237657
			-122.40099920150757</georss:box>
		<feedburner:origLink>http://android-developers.blogspot.com/2012/06/introducing-android-41-jelly-bean.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;C0cGR3g9fyp7ImA9WhJTE00.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-8318813184118424472
		</id>
		<published>2012-06-21T10:45:00.000-07:00</published>
		<updated>2012-06-21T10:50:26.667-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-06-21T10:50:26.667-07:00
		</app:edited>
		<title>Replying to User Reviews on Google Play</title>
		<content type="html">&lt;p&gt;&lt;i&gt;[This post is by &lt;a
			href="https://plus.google.com/u/0/112423705617084925086/posts"&gt;Trevor
			Johns&lt;/a&gt; from the Android
			team&amp;nbsp;&amp;mdash;&amp;nbsp;Tim
			Bray]&lt;/i&gt;&lt;/p&gt;&lt;p&gt;User reviews on Google Play are
			great for helping people discover quality apps and give feedback to
			developers and other potential app users. But what about when
			developers want to give feedback to their users? Sometimes a user
			just needs a helping hand, or perhaps a new feature has been added
			and the developer wants to share the good news.&lt;/p&gt;&lt;a
			href="http://1.bp.blogspot.com/-NntfSQNXe-s/T9jKXEb6QVI/AAAAAAAABbQ/WLn9mQHQBxc/s1600/reply_s.png"&gt;&lt;img
			style="float:right; margin:0 0 10px 10px;cursor:pointer;
			cursor:hand;width: 400px; height: 336px;"
			src="http://1.bp.blogspot.com/-NntfSQNXe-s/T9jKXEb6QVI/AAAAAAAABbQ/WLn9mQHQBxc/s400/reply_s.png"
			border="0" alt=""id="BLOGGER_PHOTO_ID_5753571021642416466"
			/&gt;&lt;/a&gt;&lt;!--&lt;a
			href="http://1.bp.blogspot.com/-hNSVsrWB71U/T9jKAIeqEYI/AAAAAAAABbE/T8PGsjSxSvI/s1600/reply.png"&gt;&lt;img
			style="float:right; margin:0 0 10px 10px;cursor:pointer;
			cursor:hand;width: 400px; height: 335px;"
			src="http://1.bp.blogspot.com/-hNSVsrWB71U/T9jKAIeqEYI/AAAAAAAABbE/T8PGsjSxSvI/s400/reply.png"
			border="0" alt=""id="BLOGGER_PHOTO_ID_5753570627590689154"
			/&gt;&lt;/a&gt;--&gt;&lt;p&gt;That’s why we’re adding the ability for
			Google Play developers to respond to reviews from the Google Play
			Android Developer Console. Developers can gather additional
			information, provide guidance, and — perhaps most importantly — let
			users know when their feature requests have been
			implemented.&lt;/p&gt;&lt;p&gt;We’ll also notify the user who wrote
			the review via email that the developer has responded. Users can then
			contact the developer directly if additional followup is needed or
			update their review.&lt;/p&gt;&lt;p&gt;We’re releasing this feature
			today to those with a &lt;a
			href="http://support.google.com/googleplay/android-developer/bin/answer.py?hl=en&amp;amp;answer=1295940"&gt;Top
			Developer badge&lt;/a&gt; &lt;span
			style="white-space:nowrap;"&gt;(&lt;img
			src="https://ssl.gstatic.com/android/market_images/badges/topdev_ann.png"/&gt;)&lt;/span&gt;.
			And based on feedback from users and developers, we will offer it to
			additional Google Play developers in the
			future.&lt;/p&gt;&lt;p&gt;Conversations are meant to be two-sided,
			and facilitating discussion between developers and users will
			ultimately yield better apps, to the benefit of
			everyone.&lt;/p&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=NCoYV8mnBgg:OXwY4SO7wV4:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=NCoYV8mnBgg:OXwY4SO7wV4:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=NCoYV8mnBgg:OXwY4SO7wV4:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/NCoYV8mnBgg"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/8318813184118424472?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/8318813184118424472?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/NCoYV8mnBgg/replying-to-user-reviews-on-google-play.html"
			title="Replying to User Reviews on Google Play" />
		<author>
			<name>Tim Bray</name>
			<uri>http://www.blogger.com/profile/00036641002026688852</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="22" height="32"
				src="http://3.bp.blogspot.com/_GTM_W5mVPTU/S9df2UvUAWI/AAAAAAAAAAM/XTF3Fh51McM/S220/Tim.jpg" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://1.bp.blogspot.com/-NntfSQNXe-s/T9jKXEb6QVI/AAAAAAAABbQ/WLn9mQHQBxc/s72-c/reply_s.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/06/replying-to-user-reviews-on-google-play.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;A0MDQX89fCp7ImA9WhJTEkQ.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-1236610933401690120
		</id>
		<published>2012-06-21T10:19:00.001-07:00</published>
		<updated>2012-06-21T10:24:30.164-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-06-21T10:24:30.164-07:00
		</app:edited>
		<title>Helping you build beautiful, powerful, successful apps</title>
		<content type="html">&lt;a
			href="http://4.bp.blogspot.com/-gc6WzbMPquI/T-NOSznHV_I/AAAAAAAABdk/Z6T1NIpMnvY/s1600/dac-logo.png"
			imageanchor="1" style="clear:right; float:right; margin-left:1em;
			margin-bottom:1em"&gt;&lt;img itemprop="image" border="0" height="67"
			width="320"
			src="http://4.bp.blogspot.com/-gc6WzbMPquI/T-NOSznHV_I/AAAAAAAABdk/Z6T1NIpMnvY/s320/dac-logo.png"
			/&gt;&lt;/a&gt;&lt;p&gt;&lt;i&gt;[This post is by &lt;a
			href="https://plus.google.com/115982658362240279544/posts"&gt;Billy
			Rutledge&lt;/a&gt;, Director of Developer Relations for
			Android.&amp;nbsp;&amp;mdash;&amp;nbsp;Tim
			Bray]&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;span
			itemprop="description"&gt;Just in time for Google I/O next week, the
			&lt;a href="http://developer.android.com"&gt;Android Developers
			site&lt;/a&gt; is stepping into a new look that is streamlined,
			simplified, and refocused.&lt;/span&gt; A developer’s tasks fall into
			three baskets: Designing, developing, and distributing. We're trying
			to make developer.android.com's organization reflect this reality,
			shepherding you through the app development life cycle, from start to
			finish. &lt;/p&gt;&lt;h3&gt;Design&lt;/h3&gt;&lt;p&gt;Earlier this
			year, we launched &lt;a
			href="http://developer.android.com/design"&gt;&lt;i&gt;Android
			Design&lt;/i&gt;&lt;/a&gt;, an online style guide which lays out the
			principles, building blocks, and patterns for excellence in Android
			user interfaces. It seems to be working; every day, we see more and
			more beautiful apps arriving in Google Play. At I/O, we’ll continue
			to talk design, kicking off with &lt;a
			href="https://developers.google.com/events/io/sessions/gooio2012/112/"&gt;Android
			Design for Success&lt;/a&gt;, led by Matias
			Duarte.&lt;/p&gt;&lt;h3&gt;Develop&lt;/h3&gt;&lt;p&gt;An Android app
			should be fast, powerful and useful. With &lt;a
			href="http://developer.android.com/training"&gt;Android
			Training&lt;/a&gt;, one of the many parts of the Develop section that
			we continue to build out, we lay out best practices in a variety of
			framework topics to help you achieve those goals. If you’re at I/O
			and you’re interested in Android tools, be sure to start off your
			show with &lt;a
			href="https://developers.google.com/events/io/sessions/gooio2012/104/"&gt;What’s
			new in Android Developers’
			Tools&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;Distribute&lt;/h3&gt;&lt;p&gt;The
			most important piece of the piece of the puzzle is about getting your
			app in front of millions and millions of Android users on Google
			Play. That’s why we added a section on distributing your app — a peek
			into the world of publishing and promoting your app. Chris Yerga on
			the Play team will be kicking off our how-to sessions on distributing
			your with &lt;a
			href="https://developers.google.com/events/io/sessions/gooio2012/123/"&gt;Android
			apps in Google Play&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This is just a small
			sample of the Android sessions at Google I/O, many of which will be
			live-streamed so you can follow along even if you can’t make it out
			to San Francisco. In the meantime, we hope you find the new Android
			Developer site much more useful as you build great
			apps.&lt;/p&gt;&lt;a
			href="https://plus.google.com/108967384991768947849/posts/Xpf8DZGPfis"
			style="text-decoration: none; color: #333;"&gt;&lt;br /&gt;
			&lt;div style="display: inline-block; line-height:
			0;float:right;"&gt;&lt;div style="float:left;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 11px;"&gt;Join the discussion on&lt;/span&gt;&lt;br /&gt;
			&lt;span style="font: bold 13px/16px arial,sans-serif; margin-right:
			4px; margin-top: 7px;"&gt;+Android Developers&lt;/span&gt;&lt;br
			/&gt;
			&lt;/div&gt;&lt;div style="float: right;"&gt;&lt;img
			src="https://ssl.gstatic.com/images/icons/gplus-32.png" width="32"
			height="32" style="border: 0;"/&gt;&lt;br /&gt;
			&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=yoY74EEk9LY:fRj4EqfkOEk:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=yoY74EEk9LY:fRj4EqfkOEk:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=yoY74EEk9LY:fRj4EqfkOEk:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/yoY74EEk9LY"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/1236610933401690120?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/1236610933401690120?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/yoY74EEk9LY/helping-you-build-beautiful-powerful.html"
			title="Helping you build beautiful, powerful, successful apps" />
		<author>
			<name>Tim Bray</name>
			<uri>http://www.blogger.com/profile/00036641002026688852</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="22" height="32"
				src="http://3.bp.blogspot.com/_GTM_W5mVPTU/S9df2UvUAWI/AAAAAAAAAAM/XTF3Fh51McM/S220/Tim.jpg" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://4.bp.blogspot.com/-gc6WzbMPquI/T-NOSznHV_I/AAAAAAAABdk/Z6T1NIpMnvY/s72-c/dac-logo.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/06/helping-you-build-beautiful-powerful.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;CkIAQX05fSp7ImA9WhVbF0g.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-8932561739684765625
		</id>
		<published>2012-06-03T12:06:00.000-07:00</published>
		<updated>2012-06-03T12:09:00.325-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-06-03T12:09:00.325-07:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="App Components" />
		<title>Using DialogFragments</title>
		<content type="html">&lt;p&gt;&lt;i&gt;[This post is by &lt;a
			href="http://turbomanage.com/"&gt;David Chandler&lt;/a&gt;, Android
			Developer Advocate&amp;nbsp;&amp;mdash;&amp;nbsp;Tim
			Bray]&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Honeycomb introduced Fragments to
			support reusing portions of UI and logic across multiple activities
			in an app. In parallel, the showDialog / dismissDialog methods in
			Activity are being deprecated &lt;a
			href="http://android-developers.blogspot.com/2011/02/android-30-fragments-api.html"&gt;in
			favor of DialogFragments&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;span
			itemprop="description"&gt;&lt;br /&gt;
			In this post, I’ll show how to use DialogFragments with the &lt;a
			href="http://developer.android.com/reference/android/support/v4/app/DialogFragment.html"&gt;v4
			support library&lt;/a&gt; (for backward compatibility on
			pre-Honeycomb devices) to show a simple edit dialog and return a
			result to the calling Activity using an interface.&lt;/span&gt; For
			design guidelines around Dialogs, see the &lt;a
			href="http://developer.android.com/design/building-blocks/dialogs.html"&gt;&lt;cite&gt;Android
			Design&lt;/cite&gt;&lt;/a&gt; site.&lt;/p&gt;&lt;h3&gt;The
			Layout&lt;/h3&gt;&lt;p&gt;Here’s the layout for the dialog in a file
			named
			&lt;code&gt;fragment_edit_name.xml&lt;/code&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;LinearLayout
			xmlns:android="http://schemas.android.com/apk/res/android"
			android:id="@+id/edit_name"
			android:layout_width="wrap_content" android:layout_height="wrap_content"
			android:layout_gravity="center" android:orientation="vertical" &gt;

			&amp;lt;TextView
			android:id="@+id/lbl_your_name" android:text="Your name"
			android:layout_width="wrap_content" android:layout_height="wrap_content" /&gt;

			&amp;lt;EditText
			android:id="@+id/txt_your_name"
			android:layout_width="match_parent" android:layout_height="wrap_content"
			android:inputType=”text”
			android:imeOptions="actionDone" /&gt;
			&amp;lt;/LinearLayout&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note the
			use of two optional attributes. In conjunction with
			&lt;code&gt;android:inputType=”text”&lt;/code&gt;,
			&lt;code&gt;android:imeOptions=”actionDone”&lt;/code&gt; configures
			the soft keyboard to show a Done key in place of the Enter
			key.&lt;/p&gt;&lt;h3&gt;The Dialog Code&lt;/h3&gt;&lt;p&gt;The dialog
			extends &lt;a
			href="http://developer.android.com/reference/android/app/DialogFragment.html"&gt;DialogFragment&lt;/a&gt;,
			and since we want backward compatibility, we’ll import it from the v4
			support library. (To add the support library to an Eclipse project,
			right-click on the project and choose Android Tools | Add Support
			Library...). &lt;/p&gt;&lt;pre&gt;&lt;code&gt;import
			android.support.v4.app.DialogFragment;
			// ...

			public class EditNameDialog extends DialogFragment {

			private EditText mEditText;

			public EditNameDialog() {
			// Empty constructor required for DialogFragment
			}

			@Override
			public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
			View view = inflater.inflate(R.layout.fragment_edit_name, container);
			mEditText = (EditText) view.findViewById(R.id.txt_your_name);
			getDialog().setTitle("Hello");

			return view;
			}
			}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The dialog extends DialogFragment and includes the required empty
			constructor. Fragments implement the
			&lt;code&gt;onCreateView()&lt;/code&gt; method to actually load the
			view using the provided LayoutInflater.&lt;/p&gt;&lt;h3&gt;Showing
			the Dialog&lt;/h3&gt;&lt;p&gt;Now we need some code in our Activity
			to show the dialog. Here is a simple example that immediately shows
			the EditNameDialog to enter the user’s name. On completion, it shows
			a Toast with the entered text.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import
			android.support.v4.app.FragmentActivity;
			import android.support.v4.app.FragmentManager;
			// ...

			public class FragmentDialogDemo extends FragmentActivity implements
			EditNameDialogListener {

			@Override
			public void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			setContentView(R.layout.main);
			showEditDialog();
			}

			private void showEditDialog() {
			FragmentManager fm = getSupportFragmentManager();
			EditNameDialog editNameDialog = new EditNameDialog();
			editNameDialog.show(fm, "fragment_edit_name");
			}

			@Override
			public void onFinishEditDialog(String inputText) {
			Toast.makeText(this, "Hi, " + inputText, Toast.LENGTH_SHORT).show();
			}
			}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are a few things to notice here. First, because we’re using the
			support library for backward compatibility with the Fragment API, our
			Activity extends FragmentActivity from the support library. Because
			we’re using the support library, we call
			&lt;code&gt;getSupportFragmentManager()&lt;/code&gt; instead of
			&lt;code&gt;getFragmentManager()&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;After
			loading the initial view, the activity immediately shows the
			EditNameDialog by calling its show() method. This allows the
			DialogFragment to ensure that what is happening with the Dialog and
			Fragment states remains consistent. By default, the back button will
			dismiss the dialog without any additional
			code.&lt;/p&gt;&lt;h3&gt;Using the Dialog&lt;/h3&gt;&lt;p&gt;Next,
			let’s enhance EditNameDialog so it can return a result string to the
			Activity.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import
			android.support.v4.app.DialogFragment;
			// ...
			public class EditNameDialog extends DialogFragment implements
			OnEditorActionListener {

			public interface EditNameDialogListener {
			void onFinishEditDialog(String inputText);
			}

			private EditText mEditText;

			public EditNameDialog() {
			// Empty constructor required for DialogFragment
			}

			@Override
			public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
			View view = inflater.inflate(R.layout.fragment_edit_name, container);
			mEditText = (EditText) view.findViewById(R.id.txt_your_name);
			getDialog().setTitle("Hello");

			// Show soft keyboard automatically
			mEditText.requestFocus();
			getDialog().getWindow().setSoftInputMode(
			LayoutParams.SOFT_INPUT_STATE_VISIBLE);
			mEditText.setOnEditorActionListener(this);

			return view;
			}

			@Override
			public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
			if (EditorInfo.IME_ACTION_DONE == actionId) {
			// Return input text to activity
			EditNameDialogListener activity = (EditNameDialogListener) getActivity();
			activity.onFinishEditDialog(mEditText.getText().toString());
			this.dismiss();
			return true;
			}
			return false;
			}
			}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For user convenience, we programmatically focus on the EditText with
			&lt;code&gt;mEditText.requestFocus()&lt;/code&gt;. Alternatively, we
			could have used the
			&lt;code&gt;&amp;lt;requestFocus/&gt;&lt;/code&gt; tag in the layout
			XML to do this; however, in some cases it’s preferable to request
			focus programmatically. For example, an OnFocusChangeListener added
			in the Fragment’s &lt;code&gt;onCreateView()&lt;/code&gt; method
			won’t get called if you request focus in the layout
			XML.&lt;/p&gt;&lt;p&gt;If the user focuses on an EditText, the soft
			keyboard will automatically appear. In order to force this to happen
			with our programmatic focus, we call
			&lt;code&gt;getDialog().getWindow().setSoftInputMode()&lt;/code&gt;.
			Note that many Window operations you might have done previously in a
			Dialog can still be done in a DialogFragment, but you have to call
			&lt;code&gt;getDialog().getWindow()&lt;/code&gt; instead of just
			&lt;code&gt;getWindow()&lt;/code&gt;. The resulting dialog is shown
			on both a handset and tablet (not to scale):&lt;/p&gt;&lt;a
			href="http://1.bp.blogspot.com/-6qyjPxTuzv0/T6lde-Oq_fI/AAAAAAAABXc/zle7OFEGP44/s1600/fddns%2Bcopy.png"&gt;&lt;img
			style="display:block; margin:0px auto 10px;
			text-align:center;cursor:pointer; cursor:hand;width: 400px; height:
			203px;"
			src="http://1.bp.blogspot.com/-6qyjPxTuzv0/T6lde-Oq_fI/AAAAAAAABXc/zle7OFEGP44/s400/fddns%2Bcopy.png"
			border="0" alt=""id="BLOGGER_PHOTO_ID_5740221986742402546"
			/&gt;&lt;/a&gt;&lt;p&gt;The &lt;code&gt;onEditorAction()&lt;/code&gt;
			method handles the callback when the user presses the Done key. It
			gets invoked because we’ve set an OnEditorActionListener on the
			EditText. It calls back to the Activity to send the entered text. To
			do this, EditNameDialog declares an interface EditNameDialogListener
			that is implemented by the Activity. This enables the dialog to be
			reused by many Activities. To invoke the callback method
			&lt;code&gt;onFinishEditDialog()&lt;/code&gt;, it obtains a reference
			to the Activity which launched the dialog by calling getActivity(),
			which all Fragments provide, and then casts it to the interface type.
			In &lt;a
			href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;MVC&lt;/a&gt;
			architecture, this is a common pattern for allowing a view to
			communicate with a controller.&lt;/p&gt;&lt;p&gt;We can dismiss the
			dialog one of two ways. Here we are calling dismiss() within the
			Dialog class itself. It could also be called from the Activity like
			the show() method.&lt;/p&gt;&lt;p&gt;Hopefully this sheds some more
			light on Fragments as they relate to Dialogs. You can find the sample
			code in this blog post &lt;a
			href="http://code.google.com/p/dialogfragmentdemo/"&gt;on Google
			Code&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;References for learning more about
			Fragments:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a
			href="http://developer.android.com/guide/topics/fundamentals/fragments.html"&gt;Fragments
			Dev Guide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;&lt;p&gt;&lt;a
			href="http://developer.android.com/training/basics/fragments/index.html"&gt;“Basic
			Training” on Fragments&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;&lt;p&gt;&lt;a
			href="http://android-developers.blogspot.com/2009/04/updating-applications-for-on-screen.html"&gt;Updating
			Applications for On-screen Input
			Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;&lt;p&gt;&lt;a
			href="http://developer.android.com/reference/android/widget/TextView.OnEditorActionListener.html"&gt;OnEditorActionListener&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
			&lt;li&gt;&lt;p&gt;&lt;a
			href="http://developer.android.com/reference/android/view/inputmethod/EditorInfo.html"&gt;EditorInfo
			and IME options&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
			&lt;/ul&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=FlyiSr9RP44:8Wzu3o7A3Rw:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=FlyiSr9RP44:8Wzu3o7A3Rw:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=FlyiSr9RP44:8Wzu3o7A3Rw:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/FlyiSr9RP44"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/8932561739684765625?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/8932561739684765625?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/FlyiSr9RP44/using-dialogfragments.html"
			title="Using DialogFragments" />
		<author>
			<name>Tim Bray</name>
			<uri>http://www.blogger.com/profile/00036641002026688852</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="22" height="32"
				src="http://3.bp.blogspot.com/_GTM_W5mVPTU/S9df2UvUAWI/AAAAAAAAAAM/XTF3Fh51McM/S220/Tim.jpg" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://1.bp.blogspot.com/-6qyjPxTuzv0/T6lde-Oq_fI/AAAAAAAABXc/zle7OFEGP44/s72-c/fddns%2Bcopy.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/05/using-dialogfragments.html
		</feedburner:origLink>
	</entry>
	<entry gd:etag="W/&quot;D08NQXo6fyp7ImA9WhVUGU8.&quot;">
		<id>tag:blogger.com,1999:blog-6755709643044947179.post-5249461569188418981
		</id>
		<published>2012-05-24T10:02:00.000-07:00</published>
		<updated>2012-05-24T23:04:50.417-07:00</updated>
		<app:edited xmlns:app="http://www.w3.org/2007/app">2012-05-24T23:04:50.417-07:00
		</app:edited>
		<category scheme="http://www.blogger.com/atom/ns#" term="Google Play" />
		<title>In-app Subscriptions in Google Play</title>
		<content type="html">&lt;br /&gt;
			&lt;span style="font-style: italic;"&gt;[This post is by Ibrahim Elbouchikhi,
			Product Manager on the Google Play team. —Dirk
			Dougherty]&lt;/span&gt;&lt;br /&gt;
			&lt;br /&gt;
			We launched In-app Billing on Google Play a year ago to give developers
			more ways to sell and engage users over the lifetime of their apps.
			Since the launch, In-app Billing has been extremely successful in
			helping developers monetize their apps through try-and-buy, virtual
			goods, upgrades, and other popular business models. Today, 23 of the
			24 top-grossing apps in Google Play use In-app Billing, and the total
			revenue generated from in-app purchases exceeds revenue from
			traditional app purchases.&lt;br /&gt;
			&lt;br /&gt;
			We’re now taking In-app Billing further by adding another important
			business model &amp;mdash; subscriptions. &lt;span
			itemprop="description"&gt;Starting today, developers can use In-app
			Billing to sell monthly or annual subscriptions from inside of their
			apps. All subscriptions are auto-renewing, for every app and game and
			every type of subscription product.&lt;/span&gt; Developers just set
			the price and billing interval and Google Play manages the purchase
			transactions for them, just as it does for other in-app products and
			app purchases.&lt;br /&gt;
			&lt;br /&gt;
			For users, Google Play provides a familiar and convenient purchase
			experience, highlighting subscription details such as price and
			billing interval before continuing with purchases. After the
			transaction, Google Play manages recurring billing and keeps users
			informed of new charges, sending them an email with each renewal. At
			any time, users can visit My Apps in the Play Store app to view their
			subscriptions and cancel any subscription as needed.&lt;br /&gt;
			&lt;br /&gt;
			&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a
			href="http://3.bp.blogspot.com/-WBPXJ8PZI7I/T72bX3RgwkI/AAAAAAAABm8/P-ESiHcCbfk/s1600/google-play-subscriptions-lg.png"
			imageanchor="1" style="margin-left:1em; margin-right:1em"&gt;&lt;img
			itemprop="image" border="0" style="border:5px solid #ddd;"
			height="324"
			src="http://1.bp.blogspot.com/-6K1kfNOdek8/T72bXvtTSQI/AAAAAAAABmw/kYzmJt0_328/s1600/google-play-subscriptions.png"
			/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;
			While making it easy for developers to offer a great purchasing
			experience, our subscriptions are also designed for flexibility.
			Developers can use them to monetize premium dynamic content such as
			journals and magazines, but they can also use them to sell access to
			bundled products, game levels, music and video content, value-added
			services, or any other digital content. &lt;br /&gt;
			&lt;br /&gt;
			Building on Google Play’s strength as a truly cloud-connected experience,
			developers can offer users the ability to carry their subscriptions
			across multiple properties, services, or campaigns. To make this
			easier, we’re introducing an HTTP-based publisher API through which
			enterprise-scale backend servers can validate or cancel
			subscriptions. Using this API, for example, developers can extend
			access from their Android apps to their web properties, based on
			subscriptions that are purchased on Google Play.&lt;br /&gt;
			&lt;br /&gt;
			In the coming days, several developers will be launching apps with
			Google Play subscriptions and we expect many more to follow. Glu
			Mobile is launching updated versions of its top Android titles,
			including &lt;a
			href="https://play.google.com/store/apps/details?id=com.glu.modwarsniper"&gt;Frontline
			Commando&lt;/a&gt;, offering subscriptions through custom VIP
			currency packages. "We're using Google Play subscriptions to offer
			consumers a compelling value and a single currency which they can use
			across Glu’s most popular titles” says Niccolo de Masi, CEO of Glu.
			“We're excited to bring these capabilities to our Android users and
			we believe that Google Play subscriptions will fuel further growth in
			our business."&lt;br /&gt;
			&lt;br /&gt;
			If you’re a developer, you can get started with subscriptions right
			away by reading the &lt;a
			href="http://developer.android.com/guide/market/billing/index.html"&gt;In-app
			Billing documentation&lt;/a&gt; and downloading the &lt;a
			href="http://developer.android.com/guide/market/billing/billing_integrate.html#billing-download"&gt;updated
			sample app&lt;/a&gt;. If you are already using in-app billing, you’ll
			find that adding support for subscriptions is straightforward and
			involves only minor changes to your code.&lt;br /&gt;
			&lt;br /&gt;
			You can publish your updated apps and subscription products as soon as
			you are ready. We’ve already rolled out client support to most
			Android devices worldwide, so any user with Google Play 3.5 or higher
			installed can buy subscriptions starting today.&lt;br /&gt;
			&lt;br /&gt;
			We’re looking forward to seeing how you use subscriptions in your
			apps!&lt;br /&gt;
			&lt;a
			href="https://plus.google.com/108967384991768947849/posts/Q4dCQwzgD3j"
			style="text-decoration: none; color: #333;"&gt;&lt;br /&gt;
			&lt;div style="display: inline-block; line-height:
			0;float:right;"&gt;&lt;div style="float:left;"&gt;&lt;span
			style="font: 13px/16px arial,sans-serif; margin-right: 4px;
			margin-top: 11px;"&gt;Join the discussion on&lt;/span&gt;&lt;br /&gt;
			&lt;span style="font: bold 13px/16px arial,sans-serif; margin-right:
			4px; margin-top: 7px;"&gt;+Android Developers&lt;/span&gt;&lt;br
			/&gt;
			&lt;/div&gt;&lt;div style="float: right;"&gt;&lt;img
			src="https://ssl.gstatic.com/images/icons/gplus-32.png" width="32"
			height="32" style="border: 0;"/&gt;&lt;br /&gt;
			&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;div class="feedflare"&gt;
			&lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=6rhyDZZ-ZXY:SuY-Cdp4wfI:yIl2AUoC8zA"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a
			href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=6rhyDZZ-ZXY:SuY-Cdp4wfI:-BTjWOF_DHI"&gt;&lt;img
			src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=6rhyDZZ-ZXY:SuY-Cdp4wfI:-BTjWOF_DHI"
			border="0"&gt;&lt;/img&gt;&lt;/a&gt;
			&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/6rhyDZZ-ZXY"
			height="1" width="1"/&gt;</content>
		<link rel="edit" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/5249461569188418981?v=2" />
		<link rel="self" type="application/atom+xml"
			href="http://www.blogger.com/feeds/6755709643044947179/posts/default/5249461569188418981?v=2" />
		<link rel="alternate" type="text/html"
			href="http://feedproxy.google.com/~r/blogspot/hsDu/~3/6rhyDZZ-ZXY/in-app-subscriptions-in-google-play.html"
			title="In-app Subscriptions in Google Play" />
		<author>
			<name>Android Developers</name>
			<uri>http://www.blogger.com/profile/06459989880590689562</uri>
			<email>noreply@blogger.com</email>
			<gd:image rel="http://schemas.google.com/g/2005#thumbnail"
				width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" />
		</author>
		<media:thumbnail xmlns:media="http://search.yahoo.com/mrss/"
			url="http://1.bp.blogspot.com/-6K1kfNOdek8/T72bXvtTSQI/AAAAAAAABmw/kYzmJt0_328/s72-c/google-play-subscriptions.png"
			height="72" width="72" />
		<feedburner:origLink>http://android-developers.blogspot.com/2012/05/in-app-subscriptions-in-google-play.html
		</feedburner:origLink>
	</entry>
</feed>
